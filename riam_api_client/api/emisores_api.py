# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SKD disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six
# Model imports
from . import InlineResponse20055
from . import InlineResponse20030
# Importing for doctring purposes
# Api Client
from riam_api_client.api_client import ApiClient


class EmisoresApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def emisores_informacion_get(self, emisor, **kwargs):  # noqa: E501
        """Obtiene la información del Emisor.  # noqa: E501

        Obtiene la información del Emisor a la fecha de hoy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emisores_informacion_get(emisor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emisor: Emisor a consultar (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20055 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.emisores_informacion_get_with_http_info(emisor, **kwargs)  # noqa: E501
        else:
            (data) = self.emisores_informacion_get_with_http_info(emisor, **kwargs)  # noqa: E501
            return data

    def emisores_informacion_get_with_http_info(self, emisor, **kwargs):  # noqa: E501
        """Obtiene la información del Emisor.  # noqa: E501

        Obtiene la información del Emisor a la fecha de hoy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emisores_informacion_get_with_http_info(emisor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emisor: Emisor a consultar (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20055 | multiprocessing.pool.ApplyResult
        """

        all_params = ['emisor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method emisores_informacion_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emisor' is set
        if ('emisor' not in params or
                params['emisor'] is None):
            raise ValueError("Missing the required parameter `emisor` when calling `emisores_informacion_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'emisor' in params:
            query_params.append(('emisor', params['emisor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Emisores/Informacion/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def emisores_informacion_get_vigentes(self, fecha, **kwargs):  # noqa: E501
        """Obtiene la lista de emisores vigentes para una fecha.  # noqa: E501

        Obtiene la lista de emisores vigentes para una fecha.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emisores_informacion_get_vigentes(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha de consulta (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20030 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.emisores_informacion_get_vigentes_with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.emisores_informacion_get_vigentes_with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def emisores_informacion_get_vigentes_with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Obtiene la lista de emisores vigentes para una fecha.  # noqa: E501

        Obtiene la lista de emisores vigentes para una fecha.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emisores_informacion_get_vigentes_with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha de consulta (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20030 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method emisores_informacion_get_vigentes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `emisores_informacion_get_vigentes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Emisores/Informacion/getVigentes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six
# Model imports
from . import InlineResponse2001
from . import InlineResponse2002
from . import InlineResponse200
from . import InlineResponse2005
from . import InlineResponse2005
from . import InlineResponse2004
from . import InlineResponse2004
from . import InlineResponse2003
from . import InlineResponse2003
# Importing for doctring purposes
# Api Client
from riam_api_client.api_client import ApiClient


class FondosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fondos_datos_cuota_get_fecha(self, fecha, **kwargs):  # noqa: E501
        """Obtiene los registros de datos cuota para todos los fondos para la fecha consultada.  # noqa: E501

        Obtiene los registros de datos cuota para todos los fondos para la fecha consultada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_datos_cuota_get_fecha(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha a Consultar (required)
        :param str moneda: Moneda en la cual se despliegan los valores. Si se omite este valor se despliegan en la moneda contable del fondo.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2001 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_datos_cuota_get_fecha_with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_datos_cuota_get_fecha_with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def fondos_datos_cuota_get_fecha_with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Obtiene los registros de datos cuota para todos los fondos para la fecha consultada.  # noqa: E501

        Obtiene los registros de datos cuota para todos los fondos para la fecha consultada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_datos_cuota_get_fecha_with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha a Consultar (required)
        :param str moneda: Moneda en la cual se despliegan los valores. Si se omite este valor se despliegan en la moneda contable del fondo.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2001 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha', 'moneda']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_datos_cuota_get_fecha" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `fondos_datos_cuota_get_fecha`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501
        if 'moneda' in params:
            query_params.append(('moneda', params['moneda']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/DatosCuota/getFecha', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fondos_datos_cuota_get_serie(self, fecha_min, fecha_max, rut, serie, **kwargs):  # noqa: E501
        """Obtiene los registros de datos cuota para todos los fondos para la serie consultada.  # noqa: E501

        Obtiene los registros de datos cuota para todos los fondos para la serie consultada entre un rango de fechas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_datos_cuota_get_serie(fecha_min, fecha_max, rut, serie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha_min: Fecha mínima a consultar (required)
        :param date fecha_max: Fecha máxima a consultar (required)
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie (required)
        :param str moneda: Moneda en la cual se despliegan los valores. Si se omite este valor se despliegan en la moneda contable del fondo.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2002 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_datos_cuota_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_datos_cuota_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, **kwargs)  # noqa: E501
            return data

    def fondos_datos_cuota_get_serie_with_http_info(self, fecha_min, fecha_max, rut, serie, **kwargs):  # noqa: E501
        """Obtiene los registros de datos cuota para todos los fondos para la serie consultada.  # noqa: E501

        Obtiene los registros de datos cuota para todos los fondos para la serie consultada entre un rango de fechas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_datos_cuota_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha_min: Fecha mínima a consultar (required)
        :param date fecha_max: Fecha máxima a consultar (required)
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie (required)
        :param str moneda: Moneda en la cual se despliegan los valores. Si se omite este valor se despliegan en la moneda contable del fondo.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2002 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha_min', 'fecha_max', 'rut', 'serie', 'moneda']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_datos_cuota_get_serie" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha_min' is set
        if ('fecha_min' not in params or
                params['fecha_min'] is None):
            raise ValueError("Missing the required parameter `fecha_min` when calling `fondos_datos_cuota_get_serie`")  # noqa: E501
        # verify the required parameter 'fecha_max' is set
        if ('fecha_max' not in params or
                params['fecha_max'] is None):
            raise ValueError("Missing the required parameter `fecha_max` when calling `fondos_datos_cuota_get_serie`")  # noqa: E501
        # verify the required parameter 'rut' is set
        if ('rut' not in params or
                params['rut'] is None):
            raise ValueError("Missing the required parameter `rut` when calling `fondos_datos_cuota_get_serie`")  # noqa: E501
        # verify the required parameter 'serie' is set
        if ('serie' not in params or
                params['serie'] is None):
            raise ValueError("Missing the required parameter `serie` when calling `fondos_datos_cuota_get_serie`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha_min' in params:
            query_params.append(('fechaMin', params['fecha_min']))  # noqa: E501
        if 'fecha_max' in params:
            query_params.append(('fechaMax', params['fecha_max']))  # noqa: E501
        if 'rut' in params:
            query_params.append(('rut', params['rut']))  # noqa: E501
        if 'serie' in params:
            query_params.append(('serie', params['serie']))  # noqa: E501
        if 'moneda' in params:
            query_params.append(('moneda', params['moneda']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/DatosCuota/getSerie', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fondos_informacion_get(self, rut, **kwargs):  # noqa: E501
        """Obtiene la información de un fondo y sus series.  # noqa: E501

        Obtiene la información de un fondo y sus series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_informacion_get(rut, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie. Si no se especifica se muestran todas las series.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse200 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_informacion_get_with_http_info(rut, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_informacion_get_with_http_info(rut, **kwargs)  # noqa: E501
            return data

    def fondos_informacion_get_with_http_info(self, rut, **kwargs):  # noqa: E501
        """Obtiene la información de un fondo y sus series.  # noqa: E501

        Obtiene la información de un fondo y sus series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_informacion_get_with_http_info(rut, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie. Si no se especifica se muestran todas las series.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse200 | multiprocessing.pool.ApplyResult
        """

        all_params = ['rut', 'serie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_informacion_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rut' is set
        if ('rut' not in params or
                params['rut'] is None):
            raise ValueError("Missing the required parameter `rut` when calling `fondos_informacion_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rut' in params:
            query_params.append(('rut', params['rut']))  # noqa: E501
        if 'serie' in params:
            query_params.append(('serie', params['serie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/Informacion/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fondos_reprocesos_get_periodo(self, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene los reprocesos de los datos cuota que han ocurrido en un periodo de tiempo.  # noqa: E501

        Obtiene los reprocesos de los datos cuota que han ocurrido en un periodo de tiempo. Este servicio solo tiene disponible reprocesos a partir del 2017-10-01.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_reprocesos_get_periodo(fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha_min: Fecha mínima a consultar (required)
        :param date fecha_max: Fecha máxima a consultar (No inclusive) (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2005 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_reprocesos_get_periodo_with_http_info(fecha_min, fecha_max, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_reprocesos_get_periodo_with_http_info(fecha_min, fecha_max, **kwargs)  # noqa: E501
            return data

    def fondos_reprocesos_get_periodo_with_http_info(self, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene los reprocesos de los datos cuota que han ocurrido en un periodo de tiempo.  # noqa: E501

        Obtiene los reprocesos de los datos cuota que han ocurrido en un periodo de tiempo. Este servicio solo tiene disponible reprocesos a partir del 2017-10-01.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_reprocesos_get_periodo_with_http_info(fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha_min: Fecha mínima a consultar (required)
        :param date fecha_max: Fecha máxima a consultar (No inclusive) (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2005 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha_min', 'fecha_max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_reprocesos_get_periodo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha_min' is set
        if ('fecha_min' not in params or
                params['fecha_min'] is None):
            raise ValueError("Missing the required parameter `fecha_min` when calling `fondos_reprocesos_get_periodo`")  # noqa: E501
        # verify the required parameter 'fecha_max' is set
        if ('fecha_max' not in params or
                params['fecha_max'] is None):
            raise ValueError("Missing the required parameter `fecha_max` when calling `fondos_reprocesos_get_periodo`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha_min' in params:
            query_params.append(('fechaMin', params['fecha_min']))  # noqa: E501
        if 'fecha_max' in params:
            query_params.append(('fechaMax', params['fecha_max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/Reprocesos/getPeriodo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fondos_reprocesos_get_serie(self, rut, serie, **kwargs):  # noqa: E501
        """Obtiene los reprocesos de los datos cuota para una serie particular.  # noqa: E501

        Obtiene los reprocesos de los datos cuota para una serie particular. Este servicio solo tiene disponible reprocesos a partir del 2017-10-01.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_reprocesos_get_serie(rut, serie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2005 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_reprocesos_get_serie_with_http_info(rut, serie, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_reprocesos_get_serie_with_http_info(rut, serie, **kwargs)  # noqa: E501
            return data

    def fondos_reprocesos_get_serie_with_http_info(self, rut, serie, **kwargs):  # noqa: E501
        """Obtiene los reprocesos de los datos cuota para una serie particular.  # noqa: E501

        Obtiene los reprocesos de los datos cuota para una serie particular. Este servicio solo tiene disponible reprocesos a partir del 2017-10-01.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_reprocesos_get_serie_with_http_info(rut, serie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2005 | multiprocessing.pool.ApplyResult
        """

        all_params = ['rut', 'serie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_reprocesos_get_serie" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rut' is set
        if ('rut' not in params or
                params['rut'] is None):
            raise ValueError("Missing the required parameter `rut` when calling `fondos_reprocesos_get_serie`")  # noqa: E501
        # verify the required parameter 'serie' is set
        if ('serie' not in params or
                params['serie'] is None):
            raise ValueError("Missing the required parameter `serie` when calling `fondos_reprocesos_get_serie`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rut' in params:
            query_params.append(('rut', params['rut']))  # noqa: E501
        if 'serie' in params:
            query_params.append(('serie', params['serie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/Reprocesos/getSerie', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fondos_retornos_ajustados_get_fecha(self, fecha, **kwargs):  # noqa: E501
        """Obtiene los registros de retornos del valor cuota ajustados por remuneración para todos los fondos para la fecha consultada.  # noqa: E501

        Obtiene los registros de retornos del valor cuota ajustados por remuneración para todos los fondos para la fecha consultada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_retornos_ajustados_get_fecha(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha a Consultar (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2004 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_retornos_ajustados_get_fecha_with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_retornos_ajustados_get_fecha_with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def fondos_retornos_ajustados_get_fecha_with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Obtiene los registros de retornos del valor cuota ajustados por remuneración para todos los fondos para la fecha consultada.  # noqa: E501

        Obtiene los registros de retornos del valor cuota ajustados por remuneración para todos los fondos para la fecha consultada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_retornos_ajustados_get_fecha_with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha a Consultar (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2004 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_retornos_ajustados_get_fecha" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `fondos_retornos_ajustados_get_fecha`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/RetornosAjustados/getFecha', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fondos_retornos_ajustados_get_serie(self, fecha_min, fecha_max, rut, serie, **kwargs):  # noqa: E501
        """Obtiene los registros de retornos del valor cuota ajustados por remuneración para la serie consultada para la fecha consultada.  # noqa: E501

        Obtiene los registros de retornos del valor cuota ajustados por remuneración para la serie consultada entre un rango de fechas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_retornos_ajustados_get_serie(fecha_min, fecha_max, rut, serie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha_min: Fecha mínima a consultar (required)
        :param date fecha_max: Fecha máxima a consultar (required)
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2004 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_retornos_ajustados_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_retornos_ajustados_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, **kwargs)  # noqa: E501
            return data

    def fondos_retornos_ajustados_get_serie_with_http_info(self, fecha_min, fecha_max, rut, serie, **kwargs):  # noqa: E501
        """Obtiene los registros de retornos del valor cuota ajustados por remuneración para la serie consultada para la fecha consultada.  # noqa: E501

        Obtiene los registros de retornos del valor cuota ajustados por remuneración para la serie consultada entre un rango de fechas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_retornos_ajustados_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha_min: Fecha mínima a consultar (required)
        :param date fecha_max: Fecha máxima a consultar (required)
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2004 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha_min', 'fecha_max', 'rut', 'serie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_retornos_ajustados_get_serie" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha_min' is set
        if ('fecha_min' not in params or
                params['fecha_min'] is None):
            raise ValueError("Missing the required parameter `fecha_min` when calling `fondos_retornos_ajustados_get_serie`")  # noqa: E501
        # verify the required parameter 'fecha_max' is set
        if ('fecha_max' not in params or
                params['fecha_max'] is None):
            raise ValueError("Missing the required parameter `fecha_max` when calling `fondos_retornos_ajustados_get_serie`")  # noqa: E501
        # verify the required parameter 'rut' is set
        if ('rut' not in params or
                params['rut'] is None):
            raise ValueError("Missing the required parameter `rut` when calling `fondos_retornos_ajustados_get_serie`")  # noqa: E501
        # verify the required parameter 'serie' is set
        if ('serie' not in params or
                params['serie'] is None):
            raise ValueError("Missing the required parameter `serie` when calling `fondos_retornos_ajustados_get_serie`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha_min' in params:
            query_params.append(('fechaMin', params['fecha_min']))  # noqa: E501
        if 'fecha_max' in params:
            query_params.append(('fechaMax', params['fecha_max']))  # noqa: E501
        if 'rut' in params:
            query_params.append(('rut', params['rut']))  # noqa: E501
        if 'serie' in params:
            query_params.append(('serie', params['serie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/RetornosAjustados/getSerie', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fondos_retornos_get_fecha(self, fecha, **kwargs):  # noqa: E501
        """Obtiene los registros de retornos del valor cuota para todos los fondos en la fecha consultada.  # noqa: E501

        Obtiene los registros de retornos del valor cuota para todos los fondos en la fecha consultada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_retornos_get_fecha(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha a Consultar (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2003 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_retornos_get_fecha_with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_retornos_get_fecha_with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def fondos_retornos_get_fecha_with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Obtiene los registros de retornos del valor cuota para todos los fondos en la fecha consultada.  # noqa: E501

        Obtiene los registros de retornos del valor cuota para todos los fondos en la fecha consultada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_retornos_get_fecha_with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha a Consultar (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2003 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_retornos_get_fecha" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `fondos_retornos_get_fecha`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/Retornos/getFecha', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fondos_retornos_get_serie(self, fecha_min, fecha_max, rut, serie, **kwargs):  # noqa: E501
        """Obtiene los registros de retornos del valor cuota para la serie consultada.  # noqa: E501

        Obtiene los registros de retornos del valor cuota para la serie consultada entre un rango de fechas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_retornos_get_serie(fecha_min, fecha_max, rut, serie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha_min: Fecha mínima a consultar (required)
        :param date fecha_max: Fecha máxima a consultar (required)
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2003 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fondos_retornos_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, **kwargs)  # noqa: E501
        else:
            (data) = self.fondos_retornos_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, **kwargs)  # noqa: E501
            return data

    def fondos_retornos_get_serie_with_http_info(self, fecha_min, fecha_max, rut, serie, **kwargs):  # noqa: E501
        """Obtiene los registros de retornos del valor cuota para la serie consultada.  # noqa: E501

        Obtiene los registros de retornos del valor cuota para la serie consultada entre un rango de fechas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fondos_retornos_get_serie_with_http_info(fecha_min, fecha_max, rut, serie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha_min: Fecha mínima a consultar (required)
        :param date fecha_max: Fecha máxima a consultar (required)
        :param int rut: Rut del Fondo (sin dígito verificador) (required)
        :param str serie: Código de la serie (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse2003 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha_min', 'fecha_max', 'rut', 'serie']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fondos_retornos_get_serie" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha_min' is set
        if ('fecha_min' not in params or
                params['fecha_min'] is None):
            raise ValueError("Missing the required parameter `fecha_min` when calling `fondos_retornos_get_serie`")  # noqa: E501
        # verify the required parameter 'fecha_max' is set
        if ('fecha_max' not in params or
                params['fecha_max'] is None):
            raise ValueError("Missing the required parameter `fecha_max` when calling `fondos_retornos_get_serie`")  # noqa: E501
        # verify the required parameter 'rut' is set
        if ('rut' not in params or
                params['rut'] is None):
            raise ValueError("Missing the required parameter `rut` when calling `fondos_retornos_get_serie`")  # noqa: E501
        # verify the required parameter 'serie' is set
        if ('serie' not in params or
                params['serie'] is None):
            raise ValueError("Missing the required parameter `serie` when calling `fondos_retornos_get_serie`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha_min' in params:
            query_params.append(('fechaMin', params['fecha_min']))  # noqa: E501
        if 'fecha_max' in params:
            query_params.append(('fechaMax', params['fecha_max']))  # noqa: E501
        if 'rut' in params:
            query_params.append(('rut', params['rut']))  # noqa: E501
        if 'serie' in params:
            query_params.append(('serie', params['serie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/Fondos/Retornos/getSerie', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

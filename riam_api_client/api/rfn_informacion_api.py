# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SKD disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six
# Model imports
from . import InlineResponse20026
from . import InlineResponse20028
from . import InlineResponse20029
from . import InlineResponse20027
from . import InlineResponse20030
from . import InlineResponse20032
from . import InlineResponse20035
from . import InlineResponse20034
from . import InlineResponse20033
from . import InlineResponse20031
from . import InlineResponse20036
# Importing for doctring purposes
# Api Client
from riam_api_client.api_client import ApiClient


class RFNInformacionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def r_fn_informacion_informacion_get(self, nemo, **kwargs):  # noqa: E501
        """Obtiene la información del Instrumento.  # noqa: E501

        Obtiene la información del Instrumento a la fecha de hoy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get(nemo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20026 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_informacion_get_with_http_info(nemo, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_informacion_get_with_http_info(nemo, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_informacion_get_with_http_info(self, nemo, **kwargs):  # noqa: E501
        """Obtiene la información del Instrumento.  # noqa: E501

        Obtiene la información del Instrumento a la fecha de hoy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_with_http_info(nemo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20026 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_informacion_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_informacion_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Informacion/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_informacion_get_interval_tasa_prepago(self, nemo, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene las tasas de prepago de un instrumento, en un invervalo de tiempo.  # noqa: E501

        Obtiene las tasas de prepago de un instrumento, en un invervalo de tiempo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_interval_tasa_prepago(nemo, fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha_min: Límite inferior del intervalo de consulta (required)
        :param date fecha_max: Límite superior del intervalo de consulta (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20028 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_informacion_get_interval_tasa_prepago_with_http_info(nemo, fecha_min, fecha_max, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_informacion_get_interval_tasa_prepago_with_http_info(nemo, fecha_min, fecha_max, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_informacion_get_interval_tasa_prepago_with_http_info(self, nemo, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene las tasas de prepago de un instrumento, en un invervalo de tiempo.  # noqa: E501

        Obtiene las tasas de prepago de un instrumento, en un invervalo de tiempo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_interval_tasa_prepago_with_http_info(nemo, fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha_min: Límite inferior del intervalo de consulta (required)
        :param date fecha_max: Límite superior del intervalo de consulta (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20028 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo', 'fecha_min', 'fecha_max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_informacion_get_interval_tasa_prepago" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_informacion_get_interval_tasa_prepago`")  # noqa: E501
        # verify the required parameter 'fecha_min' is set
        if ('fecha_min' not in params or
                params['fecha_min'] is None):
            raise ValueError("Missing the required parameter `fecha_min` when calling `r_fn_informacion_informacion_get_interval_tasa_prepago`")  # noqa: E501
        # verify the required parameter 'fecha_max' is set
        if ('fecha_max' not in params or
                params['fecha_max'] is None):
            raise ValueError("Missing the required parameter `fecha_max` when calling `r_fn_informacion_informacion_get_interval_tasa_prepago`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501
        if 'fecha_min' in params:
            query_params.append(('fechaMin', params['fecha_min']))  # noqa: E501
        if 'fecha_max' in params:
            query_params.append(('fechaMax', params['fecha_max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Informacion/getIntervalTasaPrepago', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_informacion_get_prepagos_historicos(self, nemo, **kwargs):  # noqa: E501
        """Obtiene los prepagos realizados.  # noqa: E501

        Obtiene una lista con la historia de los prepagos realizados.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_prepagos_historicos(nemo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20029 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_informacion_get_prepagos_historicos_with_http_info(nemo, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_informacion_get_prepagos_historicos_with_http_info(nemo, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_informacion_get_prepagos_historicos_with_http_info(self, nemo, **kwargs):  # noqa: E501
        """Obtiene los prepagos realizados.  # noqa: E501

        Obtiene una lista con la historia de los prepagos realizados.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_prepagos_historicos_with_http_info(nemo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20029 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_informacion_get_prepagos_historicos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_informacion_get_prepagos_historicos`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Informacion/getPrepagosHistoricos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_informacion_get_tasa_prepago(self, nemo, fecha, **kwargs):  # noqa: E501
        """Obtiene las tasas de prepago.  # noqa: E501

        Obtiene las tasas de prepago para una fecha determinada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_tasa_prepago(nemo, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha: Fecha de consulta (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20027 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_informacion_get_tasa_prepago_with_http_info(nemo, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_informacion_get_tasa_prepago_with_http_info(nemo, fecha, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_informacion_get_tasa_prepago_with_http_info(self, nemo, fecha, **kwargs):  # noqa: E501
        """Obtiene las tasas de prepago.  # noqa: E501

        Obtiene las tasas de prepago para una fecha determinada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_tasa_prepago_with_http_info(nemo, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha: Fecha de consulta (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20027 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_informacion_get_tasa_prepago" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_informacion_get_tasa_prepago`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `r_fn_informacion_informacion_get_tasa_prepago`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Informacion/getTasaPrepago', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_informacion_get_vigentes(self, fecha, **kwargs):  # noqa: E501
        """Obtiene la lista de instrumentos vigentes para una fecha.  # noqa: E501

        Obtiene la lista de instrumentos vigentes para una fecha excluyendo depósitos y efectos de comercio ya que esos siempre se encuentran vigentes cuando tienen una fecha de vencimiento mayor a la fecha de consulta.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_vigentes(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha de consulta (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20030 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_informacion_get_vigentes_with_http_info(fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_informacion_get_vigentes_with_http_info(fecha, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_informacion_get_vigentes_with_http_info(self, fecha, **kwargs):  # noqa: E501
        """Obtiene la lista de instrumentos vigentes para una fecha.  # noqa: E501

        Obtiene la lista de instrumentos vigentes para una fecha excluyendo depósitos y efectos de comercio ya que esos siempre se encuentran vigentes cuando tienen una fecha de vencimiento mayor a la fecha de consulta.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_informacion_get_vigentes_with_http_info(fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date fecha: Fecha de consulta (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20030 | multiprocessing.pool.ApplyResult
        """

        all_params = ['fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_informacion_get_vigentes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `r_fn_informacion_informacion_get_vigentes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Informacion/getVigentes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_liquidez_get(self, nemo, fecha, **kwargs):  # noqa: E501
        """Obtiene información de liquidez de un instrumento.  # noqa: E501

        Obtiene información de liquidez de un instrumento para una fecha determinada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_liquidez_get(nemo, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha: Fecha de consulta (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20032 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_liquidez_get_with_http_info(nemo, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_liquidez_get_with_http_info(nemo, fecha, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_liquidez_get_with_http_info(self, nemo, fecha, **kwargs):  # noqa: E501
        """Obtiene información de liquidez de un instrumento.  # noqa: E501

        Obtiene información de liquidez de un instrumento para una fecha determinada.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_liquidez_get_with_http_info(nemo, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha: Fecha de consulta (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20032 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_liquidez_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_liquidez_get`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `r_fn_informacion_liquidez_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Liquidez/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_liquidez_get_interval_ncg(self, nemo, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene información histórica del monto transado promedio definido por la Norma de Caracter General N°376.  # noqa: E501

        Obtiene información histórica del monto transado promedio definido por la Norma de Caracter General N°376.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_liquidez_get_interval_ncg(nemo, fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha_min: Límite inferior del intervalo a consultar (required)
        :param date fecha_max: Límite superior del intervalo a consultar (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20035 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_liquidez_get_interval_ncg_with_http_info(nemo, fecha_min, fecha_max, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_liquidez_get_interval_ncg_with_http_info(nemo, fecha_min, fecha_max, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_liquidez_get_interval_ncg_with_http_info(self, nemo, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene información histórica del monto transado promedio definido por la Norma de Caracter General N°376.  # noqa: E501

        Obtiene información histórica del monto transado promedio definido por la Norma de Caracter General N°376.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_liquidez_get_interval_ncg_with_http_info(nemo, fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha_min: Límite inferior del intervalo a consultar (required)
        :param date fecha_max: Límite superior del intervalo a consultar (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20035 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo', 'fecha_min', 'fecha_max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_liquidez_get_interval_ncg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_liquidez_get_interval_ncg`")  # noqa: E501
        # verify the required parameter 'fecha_min' is set
        if ('fecha_min' not in params or
                params['fecha_min'] is None):
            raise ValueError("Missing the required parameter `fecha_min` when calling `r_fn_informacion_liquidez_get_interval_ncg`")  # noqa: E501
        # verify the required parameter 'fecha_max' is set
        if ('fecha_max' not in params or
                params['fecha_max'] is None):
            raise ValueError("Missing the required parameter `fecha_max` when calling `r_fn_informacion_liquidez_get_interval_ncg`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501
        if 'fecha_min' in params:
            query_params.append(('fechaMin', params['fecha_min']))  # noqa: E501
        if 'fecha_max' in params:
            query_params.append(('fechaMax', params['fecha_max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Liquidez/getIntervalNCG', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto(self, nemo, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene información histórica del saldo insoluto.  # noqa: E501

        Obtiene información histórica del saldo insoluto.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto(nemo, fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha_min: Límite inferior del intervalo a consultar (required)
        :param date fecha_max: Límite superior del intervalo a consultar (required)
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20034 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto_with_http_info(nemo, fecha_min, fecha_max, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto_with_http_info(nemo, fecha_min, fecha_max, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto_with_http_info(self, nemo, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene información histórica del saldo insoluto.  # noqa: E501

        Obtiene información histórica del saldo insoluto.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto_with_http_info(nemo, fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha_min: Límite inferior del intervalo a consultar (required)
        :param date fecha_max: Límite superior del intervalo a consultar (required)
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20034 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo', 'fecha_min', 'fecha_max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto`")  # noqa: E501
        # verify the required parameter 'fecha_min' is set
        if ('fecha_min' not in params or
                params['fecha_min'] is None):
            raise ValueError("Missing the required parameter `fecha_min` when calling `r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto`")  # noqa: E501
        # verify the required parameter 'fecha_max' is set
        if ('fecha_max' not in params or
                params['fecha_max'] is None):
            raise ValueError("Missing the required parameter `fecha_max` when calling `r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501
        if 'fecha_min' in params:
            query_params.append(('fechaMin', params['fecha_min']))  # noqa: E501
        if 'fecha_max' in params:
            query_params.append(('fechaMax', params['fecha_max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Liquidez/getIntervalSaldoCustodiaInsoluto', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20034',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal(self, nemo, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene información histórica del saldo de custodia nominal.  # noqa: E501

        Obtiene información histórica del saldo de custodia nominal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal(nemo, fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha_min: Límite inferior del intervalo a consultar (required)
        :param date fecha_max: Límite superior del intervalo a consultar (required)
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20033 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal_with_http_info(nemo, fecha_min, fecha_max, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal_with_http_info(nemo, fecha_min, fecha_max, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal_with_http_info(self, nemo, fecha_min, fecha_max, **kwargs):  # noqa: E501
        """Obtiene información histórica del saldo de custodia nominal.  # noqa: E501

        Obtiene información histórica del saldo de custodia nominal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal_with_http_info(nemo, fecha_min, fecha_max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :param date fecha_min: Límite inferior del intervalo a consultar (required)
        :param date fecha_max: Límite superior del intervalo a consultar (required)
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20033 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo', 'fecha_min', 'fecha_max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal`")  # noqa: E501
        # verify the required parameter 'fecha_min' is set
        if ('fecha_min' not in params or
                params['fecha_min'] is None):
            raise ValueError("Missing the required parameter `fecha_min` when calling `r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal`")  # noqa: E501
        # verify the required parameter 'fecha_max' is set
        if ('fecha_max' not in params or
                params['fecha_max'] is None):
            raise ValueError("Missing the required parameter `fecha_max` when calling `r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501
        if 'fecha_min' in params:
            query_params.append(('fechaMin', params['fecha_min']))  # noqa: E501
        if 'fecha_max' in params:
            query_params.append(('fechaMax', params['fecha_max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Liquidez/getIntervalSaldoCustodiaNominal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_riesgo_get(self, nemo, **kwargs):  # noqa: E501
        """Obtiene los cambios de clasificación de riesgo de un instrumento.  # noqa: E501

        Obtiene los cambios de clasificación de riesgo asignadas a un instrumento.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_riesgo_get(nemo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20031 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_riesgo_get_with_http_info(nemo, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_riesgo_get_with_http_info(nemo, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_riesgo_get_with_http_info(self, nemo, **kwargs):  # noqa: E501
        """Obtiene los cambios de clasificación de riesgo de un instrumento.  # noqa: E501

        Obtiene los cambios de clasificación de riesgo asignadas a un instrumento.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_riesgo_get_with_http_info(nemo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nemo: Nemotécnico del instrumento a consultar (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20031 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_riesgo_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_riesgo_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/Riesgo/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def r_fn_informacion_tabla_desarrollo_get_cupones_futuros(self, nemo, fecha, **kwargs):  # noqa: E501
        """Obtiene la tabla de desarrollo residual para un instrumento particular.  # noqa: E501

        Obtiene la tabla de desarrollo residual para un instrumento particular.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_tabla_desarrollo_get_cupones_futuros(nemo, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date nemo: Nemotecnico a consultar (required)
        :param date fecha: Fecha a consultar (required)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20036 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.r_fn_informacion_tabla_desarrollo_get_cupones_futuros_with_http_info(nemo, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.r_fn_informacion_tabla_desarrollo_get_cupones_futuros_with_http_info(nemo, fecha, **kwargs)  # noqa: E501
            return data

    def r_fn_informacion_tabla_desarrollo_get_cupones_futuros_with_http_info(self, nemo, fecha, **kwargs):  # noqa: E501
        """Obtiene la tabla de desarrollo residual para un instrumento particular.  # noqa: E501

        Obtiene la tabla de desarrollo residual para un instrumento particular.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.r_fn_informacion_tabla_desarrollo_get_cupones_futuros_with_http_info(nemo, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date nemo: Nemotecnico a consultar (required)
        :param date fecha: Fecha a consultar (required)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20036 | multiprocessing.pool.ApplyResult
        """

        all_params = ['nemo', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_fn_informacion_tabla_desarrollo_get_cupones_futuros" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nemo' is set
        if ('nemo' not in params or
                params['nemo'] is None):
            raise ValueError("Missing the required parameter `nemo` when calling `r_fn_informacion_tabla_desarrollo_get_cupones_futuros`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `r_fn_informacion_tabla_desarrollo_get_cupones_futuros`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nemo' in params:
            query_params.append(('nemo', params['nemo']))  # noqa: E501
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/InformacionRF/TablaDesarrollo/getCuponesFuturos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

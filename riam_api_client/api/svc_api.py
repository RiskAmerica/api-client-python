# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SKD disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six
# Model imports
from . import InlineResponse20047
from . import InlineResponse20048
from . import InlineResponse20049
from . import InlineResponse20050
from . import InlineResponse20046
from . import InlineResponse20050
# Importing for doctring purposes
# Api Client
from riam_api_client.api_client import ApiClient


class SvcApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def svc_handler_download_input_file(self, id_file_task, fecha, **kwargs):  # noqa: E501
        """Descarga el archivo cargado  # noqa: E501

        Descarga el archivo de INPUT el cual se subió para el FileTask pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_download_input_file(id_file_task, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido del método getFileTasks) (required)
        :param date fecha: Fecha para la cual se esta descargando (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.svc_handler_download_input_file_with_http_info(id_file_task, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.svc_handler_download_input_file_with_http_info(id_file_task, fecha, **kwargs)  # noqa: E501
            return data

    def svc_handler_download_input_file_with_http_info(self, id_file_task, fecha, **kwargs):  # noqa: E501
        """Descarga el archivo cargado  # noqa: E501

        Descarga el archivo de INPUT el cual se subió para el FileTask pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_download_input_file_with_http_info(id_file_task, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido del método getFileTasks) (required)
        :param date fecha: Fecha para la cual se esta descargando (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str | multiprocessing.pool.ApplyResult
        """

        all_params = ['id_file_task', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method svc_handler_download_input_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_file_task' is set
        if ('id_file_task' not in params or
                params['id_file_task'] is None):
            raise ValueError("Missing the required parameter `id_file_task` when calling `svc_handler_download_input_file`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `svc_handler_download_input_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_file_task' in params:
            query_params.append(('idFileTask', params['id_file_task']))  # noqa: E501
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/SVC/Handler/downloadInputFile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def svc_handler_download_output_file(self, id_file_task, id_file_type, fecha, **kwargs):  # noqa: E501
        """Descarga el archivo salida  # noqa: E501

        Descarga el archivo de OUTPUT solicitado para el FileTask pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_download_output_file(id_file_task, id_file_type, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido del método getFileTasks) (required)
        :param int id_file_type: Id del formato de descarga el cual se solicita (Obtenido del método getOutputFormats) (required)
        :param date fecha: Fecha para la cual se esta descargando (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.svc_handler_download_output_file_with_http_info(id_file_task, id_file_type, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.svc_handler_download_output_file_with_http_info(id_file_task, id_file_type, fecha, **kwargs)  # noqa: E501
            return data

    def svc_handler_download_output_file_with_http_info(self, id_file_task, id_file_type, fecha, **kwargs):  # noqa: E501
        """Descarga el archivo salida  # noqa: E501

        Descarga el archivo de OUTPUT solicitado para el FileTask pedido  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_download_output_file_with_http_info(id_file_task, id_file_type, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido del método getFileTasks) (required)
        :param int id_file_type: Id del formato de descarga el cual se solicita (Obtenido del método getOutputFormats) (required)
        :param date fecha: Fecha para la cual se esta descargando (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str | multiprocessing.pool.ApplyResult
        """

        all_params = ['id_file_task', 'id_file_type', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method svc_handler_download_output_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_file_task' is set
        if ('id_file_task' not in params or
                params['id_file_task'] is None):
            raise ValueError("Missing the required parameter `id_file_task` when calling `svc_handler_download_output_file`")  # noqa: E501
        # verify the required parameter 'id_file_type' is set
        if ('id_file_type' not in params or
                params['id_file_type'] is None):
            raise ValueError("Missing the required parameter `id_file_type` when calling `svc_handler_download_output_file`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `svc_handler_download_output_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_file_task' in params:
            query_params.append(('idFileTask', params['id_file_task']))  # noqa: E501
        if 'id_file_type' in params:
            query_params.append(('idFileType', params['id_file_type']))  # noqa: E501
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/SVC/Handler/downloadOutputFile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def svc_handler_get_file_tasks(self, id_tipo_valorizacion, **kwargs):  # noqa: E501
        """Obtiene los FileTask disponibles  # noqa: E501

        Obtiene los FileTask disponibles para ser usados por la API KEY suministrada  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_file_tasks(id_tipo_valorizacion, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_tipo_valorizacion: Tipo de Valorizacion a consultar (Obtenido de getTipoValorizaciones) (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20047 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.svc_handler_get_file_tasks_with_http_info(id_tipo_valorizacion, **kwargs)  # noqa: E501
        else:
            (data) = self.svc_handler_get_file_tasks_with_http_info(id_tipo_valorizacion, **kwargs)  # noqa: E501
            return data

    def svc_handler_get_file_tasks_with_http_info(self, id_tipo_valorizacion, **kwargs):  # noqa: E501
        """Obtiene los FileTask disponibles  # noqa: E501

        Obtiene los FileTask disponibles para ser usados por la API KEY suministrada  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_file_tasks_with_http_info(id_tipo_valorizacion, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_tipo_valorizacion: Tipo de Valorizacion a consultar (Obtenido de getTipoValorizaciones) (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20047 | multiprocessing.pool.ApplyResult
        """

        all_params = ['id_tipo_valorizacion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method svc_handler_get_file_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_tipo_valorizacion' is set
        if ('id_tipo_valorizacion' not in params or
                params['id_tipo_valorizacion'] is None):
            raise ValueError("Missing the required parameter `id_tipo_valorizacion` when calling `svc_handler_get_file_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_tipo_valorizacion' in params:
            query_params.append(('idTipoValorizacion', params['id_tipo_valorizacion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/SVC/Handler/getFileTasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def svc_handler_get_input_formats(self, id_file_task, **kwargs):  # noqa: E501
        """Obtiene los formatos de carga  # noqa: E501

        Obtiene los formatos de carga posibles para el FileTask provisto  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_input_formats(id_file_task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido de getFileTasks) (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20048 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.svc_handler_get_input_formats_with_http_info(id_file_task, **kwargs)  # noqa: E501
        else:
            (data) = self.svc_handler_get_input_formats_with_http_info(id_file_task, **kwargs)  # noqa: E501
            return data

    def svc_handler_get_input_formats_with_http_info(self, id_file_task, **kwargs):  # noqa: E501
        """Obtiene los formatos de carga  # noqa: E501

        Obtiene los formatos de carga posibles para el FileTask provisto  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_input_formats_with_http_info(id_file_task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido de getFileTasks) (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20048 | multiprocessing.pool.ApplyResult
        """

        all_params = ['id_file_task']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method svc_handler_get_input_formats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_file_task' is set
        if ('id_file_task' not in params or
                params['id_file_task'] is None):
            raise ValueError("Missing the required parameter `id_file_task` when calling `svc_handler_get_input_formats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_file_task' in params:
            query_params.append(('idFileTask', params['id_file_task']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/SVC/Handler/getInputFormats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def svc_handler_get_output_formats(self, id_file_task, **kwargs):  # noqa: E501
        """Obtiene los formatos de descarga  # noqa: E501

        Obtiene los formatos de descarga posibles para el FileTask provisto  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_output_formats(id_file_task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido de getFileTasks) (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20049 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.svc_handler_get_output_formats_with_http_info(id_file_task, **kwargs)  # noqa: E501
        else:
            (data) = self.svc_handler_get_output_formats_with_http_info(id_file_task, **kwargs)  # noqa: E501
            return data

    def svc_handler_get_output_formats_with_http_info(self, id_file_task, **kwargs):  # noqa: E501
        """Obtiene los formatos de descarga  # noqa: E501

        Obtiene los formatos de descarga posibles para el FileTask provisto  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_output_formats_with_http_info(id_file_task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido de getFileTasks) (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20049 | multiprocessing.pool.ApplyResult
        """

        all_params = ['id_file_task']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method svc_handler_get_output_formats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_file_task' is set
        if ('id_file_task' not in params or
                params['id_file_task'] is None):
            raise ValueError("Missing the required parameter `id_file_task` when calling `svc_handler_get_output_formats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_file_task' in params:
            query_params.append(('idFileTask', params['id_file_task']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/SVC/Handler/getOutputFormats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def svc_handler_get_status(self, id_file_task, fecha, **kwargs):  # noqa: E501
        """Revisa el estado de un FileTask  # noqa: E501

        Revisa el estado de un FileTask<br /> <br /> STATE_AWAITING_INPUT: El FileTask no ha sido cargado para la fecha consultada<br /> STATE_AWAITING_PROCESSING: El Filetask esta encolado para ser procesado, debería estar listo prontamente (aprox 1 minuto)<br /> STATE_AWAITING_PRICES: RiskAmerica aún no ha publicado los precios para el día solicitado<br /> STATE_AWAITING_DOWNLOAD: El archivo esta listo para ser descargado<br /> STATE_DOWNLOADED: El archivo ya ha sido descargado al menos una vez (y puede ser descargado nuevamente)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_status(id_file_task, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido de getFileTasks) (required)
        :param date fecha: Fecha para la cual se esta cargando (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20050 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.svc_handler_get_status_with_http_info(id_file_task, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.svc_handler_get_status_with_http_info(id_file_task, fecha, **kwargs)  # noqa: E501
            return data

    def svc_handler_get_status_with_http_info(self, id_file_task, fecha, **kwargs):  # noqa: E501
        """Revisa el estado de un FileTask  # noqa: E501

        Revisa el estado de un FileTask<br /> <br /> STATE_AWAITING_INPUT: El FileTask no ha sido cargado para la fecha consultada<br /> STATE_AWAITING_PROCESSING: El Filetask esta encolado para ser procesado, debería estar listo prontamente (aprox 1 minuto)<br /> STATE_AWAITING_PRICES: RiskAmerica aún no ha publicado los precios para el día solicitado<br /> STATE_AWAITING_DOWNLOAD: El archivo esta listo para ser descargado<br /> STATE_DOWNLOADED: El archivo ya ha sido descargado al menos una vez (y puede ser descargado nuevamente)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_status_with_http_info(id_file_task, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido de getFileTasks) (required)
        :param date fecha: Fecha para la cual se esta cargando (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20050 | multiprocessing.pool.ApplyResult
        """

        all_params = ['id_file_task', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method svc_handler_get_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_file_task' is set
        if ('id_file_task' not in params or
                params['id_file_task'] is None):
            raise ValueError("Missing the required parameter `id_file_task` when calling `svc_handler_get_status`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `svc_handler_get_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_file_task' in params:
            query_params.append(('idFileTask', params['id_file_task']))  # noqa: E501
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/SVC/Handler/getStatus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def svc_handler_get_tipo_valorizaciones(self, **kwargs):  # noqa: E501
        """Obtiene los tipos de valorizaciones  # noqa: E501

        Obtiene los tipos de valorizaciones disponibles para la API KEY suministrada  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_tipo_valorizaciones(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20046 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.svc_handler_get_tipo_valorizaciones_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.svc_handler_get_tipo_valorizaciones_with_http_info(**kwargs)  # noqa: E501
            return data

    def svc_handler_get_tipo_valorizaciones_with_http_info(self, **kwargs):  # noqa: E501
        """Obtiene los tipos de valorizaciones  # noqa: E501

        Obtiene los tipos de valorizaciones disponibles para la API KEY suministrada  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_get_tipo_valorizaciones_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20046 | multiprocessing.pool.ApplyResult
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method svc_handler_get_tipo_valorizaciones" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/SVC/Handler/getTipoValorizaciones', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def svc_handler_upload_file(self, file, id_file_task, id_file_type, fecha, **kwargs):  # noqa: E501
        """Envía un archivo al SVC  # noqa: E501

        Envía un archivo de carga al Servicio de Valorización de Carteras. Para entender los estados que devuelve el sistema refierase a leer la documentación del metodo getStatus.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_upload_file(file, id_file_task, id_file_type, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido de getFileTasks) (required)
        :param int id_file_type: Id del formato de carga el cual se envía (Obtenido de getInputFormats) (required)
        :param date fecha: Fecha para la cual se esta cargando (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20050 | multiprocessing.pool.ApplyResult
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.svc_handler_upload_file_with_http_info(file, id_file_task, id_file_type, fecha, **kwargs)  # noqa: E501
        else:
            (data) = self.svc_handler_upload_file_with_http_info(file, id_file_task, id_file_type, fecha, **kwargs)  # noqa: E501
            return data

    def svc_handler_upload_file_with_http_info(self, file, id_file_task, id_file_type, fecha, **kwargs):  # noqa: E501
        """Envía un archivo al SVC  # noqa: E501

        Envía un archivo de carga al Servicio de Valorización de Carteras. Para entender los estados que devuelve el sistema refierase a leer la documentación del metodo getStatus.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.svc_handler_upload_file_with_http_info(file, id_file_task, id_file_type, fecha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param int id_file_task: Id FileTask para el cual se consulta (Obtenido de getFileTasks) (required)
        :param int id_file_type: Id del formato de carga el cual se envía (Obtenido de getInputFormats) (required)
        :param date fecha: Fecha para la cual se esta cargando (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse20050 | multiprocessing.pool.ApplyResult
        """

        all_params = ['file', 'id_file_task', 'id_file_type', 'fecha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method svc_handler_upload_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `svc_handler_upload_file`")  # noqa: E501
        # verify the required parameter 'id_file_task' is set
        if ('id_file_task' not in params or
                params['id_file_task'] is None):
            raise ValueError("Missing the required parameter `id_file_task` when calling `svc_handler_upload_file`")  # noqa: E501
        # verify the required parameter 'id_file_type' is set
        if ('id_file_type' not in params or
                params['id_file_type'] is None):
            raise ValueError("Missing the required parameter `id_file_type` when calling `svc_handler_upload_file`")  # noqa: E501
        # verify the required parameter 'fecha' is set
        if ('fecha' not in params or
                params['fecha'] is None):
            raise ValueError("Missing the required parameter `fecha` when calling `svc_handler_upload_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_file_task' in params:
            query_params.append(('idFileTask', params['id_file_task']))  # noqa: E501
        if 'id_file_type' in params:
            query_params.append(('idFileType', params['id_file_type']))  # noqa: E501
        if 'fecha' in params:
            query_params.append(('fecha', params['fecha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/Outputs/Generic/SVC/Handler/uploadFile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

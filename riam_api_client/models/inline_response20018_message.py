# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SDK disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models




class InlineResponse20018Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fecha': 'date',
        'tir': 'float',
        'cantidad': 'float',
        'monto_transado': 'float',
        'moneda': 'str',
        'monto_transado_clp': 'float',
        'precio_porcentaje_valor_par': 'float',
        'duracion_macaulay': 'float',
        'tir_base': 'float',
        'origen': 'str',
        'spread': 'float',
        'nemo': 'str'
    }

    attribute_map = {
        'fecha': 'fecha',
        'tir': 'tir',
        'cantidad': 'cantidad',
        'monto_transado': 'montoTransado',
        'moneda': 'moneda',
        'monto_transado_clp': 'montoTransadoCLP',
        'precio_porcentaje_valor_par': 'precioPorcentajeValorPar',
        'duracion_macaulay': 'duracionMacaulay',
        'tir_base': 'tirBase',
        'origen': 'origen',
        'spread': 'spread',
        'nemo': 'nemo'
    }

    def __init__(self, fecha=None, tir=None, cantidad=None, monto_transado=None, moneda=None, monto_transado_clp=None, precio_porcentaje_valor_par=None, duracion_macaulay=None, tir_base=None, origen=None, spread=None, nemo=None):  # noqa: E501
        """InlineResponse20018Message - a model defined in Swagger"""  # noqa: E501
        self._fecha = None
        self._tir = None
        self._cantidad = None
        self._monto_transado = None
        self._moneda = None
        self._monto_transado_clp = None
        self._precio_porcentaje_valor_par = None
        self._duracion_macaulay = None
        self._tir_base = None
        self._origen = None
        self._spread = None
        self._nemo = None
        self.discriminator = None
        if fecha is not None:
            self.fecha = fecha
        if tir is not None:
            self.tir = tir
        if cantidad is not None:
            self.cantidad = cantidad
        if monto_transado is not None:
            self.monto_transado = monto_transado
        if moneda is not None:
            self.moneda = moneda
        if monto_transado_clp is not None:
            self.monto_transado_clp = monto_transado_clp
        if precio_porcentaje_valor_par is not None:
            self.precio_porcentaje_valor_par = precio_porcentaje_valor_par
        if duracion_macaulay is not None:
            self.duracion_macaulay = duracion_macaulay
        if tir_base is not None:
            self.tir_base = tir_base
        if origen is not None:
            self.origen = origen
        if spread is not None:
            self.spread = spread
        if nemo is not None:
            self.nemo = nemo

    @property
    def fecha(self):
        """Gets the fecha of this InlineResponse20018Message.  # noqa: E501
        Fecha de la transacción  # noqa: E501

        :return: The fecha of this InlineResponse20018Message.  # noqa: E501
        :rtype: date
        """
        return self._fecha

    @fecha.setter
    def fecha(self, fecha):
        """Sets the fecha of this InlineResponse20018Message.

        Fecha de la transacción  # noqa: E501

        :param fecha: The fecha of this InlineResponse20018Message.  # noqa: E501
        :type: date
        """

        self._fecha = fecha

    @property
    def tir(self):
        """Gets the tir of this InlineResponse20018Message.  # noqa: E501
        Tasa de la transacción  # noqa: E501

        :return: The tir of this InlineResponse20018Message.  # noqa: E501
        :rtype: float
        """
        return self._tir

    @tir.setter
    def tir(self, tir):
        """Sets the tir of this InlineResponse20018Message.

        Tasa de la transacción  # noqa: E501

        :param tir: The tir of this InlineResponse20018Message.  # noqa: E501
        :type: float
        """

        self._tir = tir

    @property
    def cantidad(self):
        """Gets the cantidad of this InlineResponse20018Message.  # noqa: E501
        Cantidad que se transa  # noqa: E501

        :return: The cantidad of this InlineResponse20018Message.  # noqa: E501
        :rtype: float
        """
        return self._cantidad

    @cantidad.setter
    def cantidad(self, cantidad):
        """Sets the cantidad of this InlineResponse20018Message.

        Cantidad que se transa  # noqa: E501

        :param cantidad: The cantidad of this InlineResponse20018Message.  # noqa: E501
        :type: float
        """

        self._cantidad = cantidad

    @property
    def monto_transado(self):
        """Gets the monto_transado of this InlineResponse20018Message.  # noqa: E501
        Monto transado en moneda del instrumento  # noqa: E501

        :return: The monto_transado of this InlineResponse20018Message.  # noqa: E501
        :rtype: float
        """
        return self._monto_transado

    @monto_transado.setter
    def monto_transado(self, monto_transado):
        """Sets the monto_transado of this InlineResponse20018Message.

        Monto transado en moneda del instrumento  # noqa: E501

        :param monto_transado: The monto_transado of this InlineResponse20018Message.  # noqa: E501
        :type: float
        """

        self._monto_transado = monto_transado

    @property
    def moneda(self):
        """Gets the moneda of this InlineResponse20018Message.  # noqa: E501
        Moneda del instrumento  # noqa: E501

        :return: The moneda of this InlineResponse20018Message.  # noqa: E501
        :rtype: str
        """
        return self._moneda

    @moneda.setter
    def moneda(self, moneda):
        """Sets the moneda of this InlineResponse20018Message.

        Moneda del instrumento  # noqa: E501

        :param moneda: The moneda of this InlineResponse20018Message.  # noqa: E501
        :type: str
        """

        self._moneda = moneda

    @property
    def monto_transado_clp(self):
        """Gets the monto_transado_clp of this InlineResponse20018Message.  # noqa: E501
        Monto transado en pesos  # noqa: E501

        :return: The monto_transado_clp of this InlineResponse20018Message.  # noqa: E501
        :rtype: float
        """
        return self._monto_transado_clp

    @monto_transado_clp.setter
    def monto_transado_clp(self, monto_transado_clp):
        """Sets the monto_transado_clp of this InlineResponse20018Message.

        Monto transado en pesos  # noqa: E501

        :param monto_transado_clp: The monto_transado_clp of this InlineResponse20018Message.  # noqa: E501
        :type: float
        """

        self._monto_transado_clp = monto_transado_clp

    @property
    def precio_porcentaje_valor_par(self):
        """Gets the precio_porcentaje_valor_par of this InlineResponse20018Message.  # noqa: E501
        Precio porcentaje valor par  # noqa: E501

        :return: The precio_porcentaje_valor_par of this InlineResponse20018Message.  # noqa: E501
        :rtype: float
        """
        return self._precio_porcentaje_valor_par

    @precio_porcentaje_valor_par.setter
    def precio_porcentaje_valor_par(self, precio_porcentaje_valor_par):
        """Sets the precio_porcentaje_valor_par of this InlineResponse20018Message.

        Precio porcentaje valor par  # noqa: E501

        :param precio_porcentaje_valor_par: The precio_porcentaje_valor_par of this InlineResponse20018Message.  # noqa: E501
        :type: float
        """

        self._precio_porcentaje_valor_par = precio_porcentaje_valor_par

    @property
    def duracion_macaulay(self):
        """Gets the duracion_macaulay of this InlineResponse20018Message.  # noqa: E501
        Duración de Macaulay calculada con la TIR de la transacción  # noqa: E501

        :return: The duracion_macaulay of this InlineResponse20018Message.  # noqa: E501
        :rtype: float
        """
        return self._duracion_macaulay

    @duracion_macaulay.setter
    def duracion_macaulay(self, duracion_macaulay):
        """Sets the duracion_macaulay of this InlineResponse20018Message.

        Duración de Macaulay calculada con la TIR de la transacción  # noqa: E501

        :param duracion_macaulay: The duracion_macaulay of this InlineResponse20018Message.  # noqa: E501
        :type: float
        """

        self._duracion_macaulay = duracion_macaulay

    @property
    def tir_base(self):
        """Gets the tir_base of this InlineResponse20018Message.  # noqa: E501
        TIR Base  # noqa: E501

        :return: The tir_base of this InlineResponse20018Message.  # noqa: E501
        :rtype: float
        """
        return self._tir_base

    @tir_base.setter
    def tir_base(self, tir_base):
        """Sets the tir_base of this InlineResponse20018Message.

        TIR Base  # noqa: E501

        :param tir_base: The tir_base of this InlineResponse20018Message.  # noqa: E501
        :type: float
        """

        self._tir_base = tir_base

    @property
    def origen(self):
        """Gets the origen of this InlineResponse20018Message.  # noqa: E501
        Origen  # noqa: E501

        :return: The origen of this InlineResponse20018Message.  # noqa: E501
        :rtype: str
        """
        return self._origen

    @origen.setter
    def origen(self, origen):
        """Sets the origen of this InlineResponse20018Message.

        Origen  # noqa: E501

        :param origen: The origen of this InlineResponse20018Message.  # noqa: E501
        :type: str
        """

        self._origen = origen

    @property
    def spread(self):
        """Gets the spread of this InlineResponse20018Message.  # noqa: E501
        Spread de la transacción  # noqa: E501

        :return: The spread of this InlineResponse20018Message.  # noqa: E501
        :rtype: float
        """
        return self._spread

    @spread.setter
    def spread(self, spread):
        """Sets the spread of this InlineResponse20018Message.

        Spread de la transacción  # noqa: E501

        :param spread: The spread of this InlineResponse20018Message.  # noqa: E501
        :type: float
        """

        self._spread = spread

    @property
    def nemo(self):
        """Gets the nemo of this InlineResponse20018Message.  # noqa: E501
        Nemotécnico del instrumento  # noqa: E501

        :return: The nemo of this InlineResponse20018Message.  # noqa: E501
        :rtype: str
        """
        return self._nemo

    @nemo.setter
    def nemo(self, nemo):
        """Sets the nemo of this InlineResponse20018Message.

        Nemotécnico del instrumento  # noqa: E501

        :param nemo: The nemo of this InlineResponse20018Message.  # noqa: E501
        :type: str
        """

        self._nemo = nemo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20018Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

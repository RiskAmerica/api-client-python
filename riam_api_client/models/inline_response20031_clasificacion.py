# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SDK disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models




class InlineResponse20031Clasificacion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_clasificadora': 'str',
        'id_clasificacion_ra': 'int',
        'short_name': 'str',
        'long_name': 'str',
        'id': 'str'
    }

    attribute_map = {
        'id_clasificadora': 'idClasificadora',
        'id_clasificacion_ra': 'idClasificacionRA',
        'short_name': 'shortName',
        'long_name': 'longName',
        'id': 'id'
    }

    def __init__(self, id_clasificadora=None, id_clasificacion_ra=None, short_name=None, long_name=None, id=None):  # noqa: E501
        """InlineResponse20031Clasificacion - a model defined in Swagger"""  # noqa: E501
        self._id_clasificadora = None
        self._id_clasificacion_ra = None
        self._short_name = None
        self._long_name = None
        self._id = None
        self.discriminator = None
        if id_clasificadora is not None:
            self.id_clasificadora = id_clasificadora
        if id_clasificacion_ra is not None:
            self.id_clasificacion_ra = id_clasificacion_ra
        if short_name is not None:
            self.short_name = short_name
        if long_name is not None:
            self.long_name = long_name
        if id is not None:
            self.id = id

    @property
    def id_clasificadora(self):
        """Gets the id_clasificadora of this InlineResponse20031Clasificacion.  # noqa: E501
        Id de la clasificadora  # noqa: E501

        :return: The id_clasificadora of this InlineResponse20031Clasificacion.  # noqa: E501
        :rtype: str
        """
        return self._id_clasificadora

    @id_clasificadora.setter
    def id_clasificadora(self, id_clasificadora):
        """Sets the id_clasificadora of this InlineResponse20031Clasificacion.

        Id de la clasificadora  # noqa: E501

        :param id_clasificadora: The id_clasificadora of this InlineResponse20031Clasificacion.  # noqa: E501
        :type: str
        """

        self._id_clasificadora = id_clasificadora

    @property
    def id_clasificacion_ra(self):
        """Gets the id_clasificacion_ra of this InlineResponse20031Clasificacion.  # noqa: E501
        Identificador de la clasificación. Este número sirve para comprar, en donde si id1>id2 entonces la clasificación 1 es más riesgosa que la 2  # noqa: E501

        :return: The id_clasificacion_ra of this InlineResponse20031Clasificacion.  # noqa: E501
        :rtype: int
        """
        return self._id_clasificacion_ra

    @id_clasificacion_ra.setter
    def id_clasificacion_ra(self, id_clasificacion_ra):
        """Sets the id_clasificacion_ra of this InlineResponse20031Clasificacion.

        Identificador de la clasificación. Este número sirve para comprar, en donde si id1>id2 entonces la clasificación 1 es más riesgosa que la 2  # noqa: E501

        :param id_clasificacion_ra: The id_clasificacion_ra of this InlineResponse20031Clasificacion.  # noqa: E501
        :type: int
        """

        self._id_clasificacion_ra = id_clasificacion_ra

    @property
    def short_name(self):
        """Gets the short_name of this InlineResponse20031Clasificacion.  # noqa: E501
        Nombre corto de la clasificación de Riesgo del Instrumento  # noqa: E501

        :return: The short_name of this InlineResponse20031Clasificacion.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this InlineResponse20031Clasificacion.

        Nombre corto de la clasificación de Riesgo del Instrumento  # noqa: E501

        :param short_name: The short_name of this InlineResponse20031Clasificacion.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def long_name(self):
        """Gets the long_name of this InlineResponse20031Clasificacion.  # noqa: E501
        Nombre largo de la clasificación de Riesgo del Instrumento  # noqa: E501

        :return: The long_name of this InlineResponse20031Clasificacion.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this InlineResponse20031Clasificacion.

        Nombre largo de la clasificación de Riesgo del Instrumento  # noqa: E501

        :param long_name: The long_name of this InlineResponse20031Clasificacion.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def id(self):
        """Gets the id of this InlineResponse20031Clasificacion.  # noqa: E501
        Clasificación de Riesgo del Instrumento  # noqa: E501

        :return: The id of this InlineResponse20031Clasificacion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20031Clasificacion.

        Clasificación de Riesgo del Instrumento  # noqa: E501

        :param id: The id of this InlineResponse20031Clasificacion.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20031Clasificacion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20031Clasificacion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SDK disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models




class InlineResponse20036MessageTablaDesarrollo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fecha_cupon': 'date',
        'interes': 'float',
        'amortizacion': 'float',
        'capital_insoluto': 'float',
        'flujo': 'float'
    }

    attribute_map = {
        'fecha_cupon': 'fechaCupon',
        'interes': 'interes',
        'amortizacion': 'amortizacion',
        'capital_insoluto': 'capitalInsoluto',
        'flujo': 'flujo'
    }

    def __init__(self, fecha_cupon=None, interes=None, amortizacion=None, capital_insoluto=None, flujo=None):  # noqa: E501
        """InlineResponse20036MessageTablaDesarrollo - a model defined in Swagger"""  # noqa: E501
        self._fecha_cupon = None
        self._interes = None
        self._amortizacion = None
        self._capital_insoluto = None
        self._flujo = None
        self.discriminator = None
        if fecha_cupon is not None:
            self.fecha_cupon = fecha_cupon
        if interes is not None:
            self.interes = interes
        if amortizacion is not None:
            self.amortizacion = amortizacion
        if capital_insoluto is not None:
            self.capital_insoluto = capital_insoluto
        if flujo is not None:
            self.flujo = flujo

    @property
    def fecha_cupon(self):
        """Gets the fecha_cupon of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        Fecha del cupon  # noqa: E501

        :return: The fecha_cupon of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :rtype: date
        """
        return self._fecha_cupon

    @fecha_cupon.setter
    def fecha_cupon(self, fecha_cupon):
        """Sets the fecha_cupon of this InlineResponse20036MessageTablaDesarrollo.

        Fecha del cupon  # noqa: E501

        :param fecha_cupon: The fecha_cupon of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :type: date
        """

        self._fecha_cupon = fecha_cupon

    @property
    def interes(self):
        """Gets the interes of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        Interes en base 100  # noqa: E501

        :return: The interes of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :rtype: float
        """
        return self._interes

    @interes.setter
    def interes(self, interes):
        """Sets the interes of this InlineResponse20036MessageTablaDesarrollo.

        Interes en base 100  # noqa: E501

        :param interes: The interes of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :type: float
        """

        self._interes = interes

    @property
    def amortizacion(self):
        """Gets the amortizacion of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        Amortización en base 100  # noqa: E501

        :return: The amortizacion of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :rtype: float
        """
        return self._amortizacion

    @amortizacion.setter
    def amortizacion(self, amortizacion):
        """Sets the amortizacion of this InlineResponse20036MessageTablaDesarrollo.

        Amortización en base 100  # noqa: E501

        :param amortizacion: The amortizacion of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :type: float
        """

        self._amortizacion = amortizacion

    @property
    def capital_insoluto(self):
        """Gets the capital_insoluto of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        Capital Insoluto en base 100  # noqa: E501

        :return: The capital_insoluto of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :rtype: float
        """
        return self._capital_insoluto

    @capital_insoluto.setter
    def capital_insoluto(self, capital_insoluto):
        """Sets the capital_insoluto of this InlineResponse20036MessageTablaDesarrollo.

        Capital Insoluto en base 100  # noqa: E501

        :param capital_insoluto: The capital_insoluto of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :type: float
        """

        self._capital_insoluto = capital_insoluto

    @property
    def flujo(self):
        """Gets the flujo of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        Flujo en base 100  # noqa: E501

        :return: The flujo of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :rtype: float
        """
        return self._flujo

    @flujo.setter
    def flujo(self, flujo):
        """Sets the flujo of this InlineResponse20036MessageTablaDesarrollo.

        Flujo en base 100  # noqa: E501

        :param flujo: The flujo of this InlineResponse20036MessageTablaDesarrollo.  # noqa: E501
        :type: float
        """

        self._flujo = flujo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20036MessageTablaDesarrollo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20036MessageTablaDesarrollo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

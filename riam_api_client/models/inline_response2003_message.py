# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SKD disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models




class InlineResponse2003Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rut': 'int',
        'serie': 'str',
        'fecha': 'date',
        'dia': 'float',
        'mtd': 'float',
        'ytd': 'float',
        'meses_1': 'float',
        'meses_3': 'float',
        'meses_6': 'float',
        'meses_9': 'float',
        'anos_1': 'float',
        'anos_2': 'float',
        'anos_3': 'float',
        'anos_5': 'float'
    }

    attribute_map = {
        'rut': 'rut',
        'serie': 'serie',
        'fecha': 'fecha',
        'dia': 'Dia',
        'mtd': 'MTD',
        'ytd': 'YTD',
        'meses_1': 'Meses_1',
        'meses_3': 'Meses_3',
        'meses_6': 'Meses_6',
        'meses_9': 'Meses_9',
        'anos_1': 'Anos_1',
        'anos_2': 'Anos_2',
        'anos_3': 'Anos_3',
        'anos_5': 'Anos_5'
    }

    def __init__(self, rut=None, serie=None, fecha=None, dia=None, mtd=None, ytd=None, meses_1=None, meses_3=None, meses_6=None, meses_9=None, anos_1=None, anos_2=None, anos_3=None, anos_5=None):  # noqa: E501
        """InlineResponse2003Message - a model defined in Swagger"""  # noqa: E501
        self._rut = None
        self._serie = None
        self._fecha = None
        self._dia = None
        self._mtd = None
        self._ytd = None
        self._meses_1 = None
        self._meses_3 = None
        self._meses_6 = None
        self._meses_9 = None
        self._anos_1 = None
        self._anos_2 = None
        self._anos_3 = None
        self._anos_5 = None
        self.discriminator = None
        if rut is not None:
            self.rut = rut
        if serie is not None:
            self.serie = serie
        if fecha is not None:
            self.fecha = fecha
        if dia is not None:
            self.dia = dia
        if mtd is not None:
            self.mtd = mtd
        if ytd is not None:
            self.ytd = ytd
        if meses_1 is not None:
            self.meses_1 = meses_1
        if meses_3 is not None:
            self.meses_3 = meses_3
        if meses_6 is not None:
            self.meses_6 = meses_6
        if meses_9 is not None:
            self.meses_9 = meses_9
        if anos_1 is not None:
            self.anos_1 = anos_1
        if anos_2 is not None:
            self.anos_2 = anos_2
        if anos_3 is not None:
            self.anos_3 = anos_3
        if anos_5 is not None:
            self.anos_5 = anos_5

    @property
    def rut(self):
        """Gets the rut of this InlineResponse2003Message.  # noqa: E501
        Rut del Fondo (sin dígito verificador)  # noqa: E501

        :return: The rut of this InlineResponse2003Message.  # noqa: E501
        :rtype: int
        """
        return self._rut

    @rut.setter
    def rut(self, rut):
        """Sets the rut of this InlineResponse2003Message.

        Rut del Fondo (sin dígito verificador)  # noqa: E501

        :param rut: The rut of this InlineResponse2003Message.  # noqa: E501
        :type: int
        """

        self._rut = rut

    @property
    def serie(self):
        """Gets the serie of this InlineResponse2003Message.  # noqa: E501
        Código de la serie  # noqa: E501

        :return: The serie of this InlineResponse2003Message.  # noqa: E501
        :rtype: str
        """
        return self._serie

    @serie.setter
    def serie(self, serie):
        """Sets the serie of this InlineResponse2003Message.

        Código de la serie  # noqa: E501

        :param serie: The serie of this InlineResponse2003Message.  # noqa: E501
        :type: str
        """

        self._serie = serie

    @property
    def fecha(self):
        """Gets the fecha of this InlineResponse2003Message.  # noqa: E501
        Fecha de los valores entregados  # noqa: E501

        :return: The fecha of this InlineResponse2003Message.  # noqa: E501
        :rtype: date
        """
        return self._fecha

    @fecha.setter
    def fecha(self, fecha):
        """Sets the fecha of this InlineResponse2003Message.

        Fecha de los valores entregados  # noqa: E501

        :param fecha: The fecha of this InlineResponse2003Message.  # noqa: E501
        :type: date
        """

        self._fecha = fecha

    @property
    def dia(self):
        """Gets the dia of this InlineResponse2003Message.  # noqa: E501
        Retorno con respecto al día anterior  # noqa: E501

        :return: The dia of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._dia

    @dia.setter
    def dia(self, dia):
        """Sets the dia of this InlineResponse2003Message.

        Retorno con respecto al día anterior  # noqa: E501

        :param dia: The dia of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._dia = dia

    @property
    def mtd(self):
        """Gets the mtd of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado desde el primer día del mes  # noqa: E501

        :return: The mtd of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._mtd

    @mtd.setter
    def mtd(self, mtd):
        """Sets the mtd of this InlineResponse2003Message.

        Retorno acumulado desde el primer día del mes  # noqa: E501

        :param mtd: The mtd of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._mtd = mtd

    @property
    def ytd(self):
        """Gets the ytd of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado desde el 1 de Enero del año  # noqa: E501

        :return: The ytd of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._ytd

    @ytd.setter
    def ytd(self, ytd):
        """Sets the ytd of this InlineResponse2003Message.

        Retorno acumulado desde el 1 de Enero del año  # noqa: E501

        :param ytd: The ytd of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._ytd = ytd

    @property
    def meses_1(self):
        """Gets the meses_1 of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado en 1 mes  # noqa: E501

        :return: The meses_1 of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._meses_1

    @meses_1.setter
    def meses_1(self, meses_1):
        """Sets the meses_1 of this InlineResponse2003Message.

        Retorno acumulado en 1 mes  # noqa: E501

        :param meses_1: The meses_1 of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._meses_1 = meses_1

    @property
    def meses_3(self):
        """Gets the meses_3 of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado en 3 meses  # noqa: E501

        :return: The meses_3 of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._meses_3

    @meses_3.setter
    def meses_3(self, meses_3):
        """Sets the meses_3 of this InlineResponse2003Message.

        Retorno acumulado en 3 meses  # noqa: E501

        :param meses_3: The meses_3 of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._meses_3 = meses_3

    @property
    def meses_6(self):
        """Gets the meses_6 of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado en 6 meses  # noqa: E501

        :return: The meses_6 of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._meses_6

    @meses_6.setter
    def meses_6(self, meses_6):
        """Sets the meses_6 of this InlineResponse2003Message.

        Retorno acumulado en 6 meses  # noqa: E501

        :param meses_6: The meses_6 of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._meses_6 = meses_6

    @property
    def meses_9(self):
        """Gets the meses_9 of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado en 9 meses  # noqa: E501

        :return: The meses_9 of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._meses_9

    @meses_9.setter
    def meses_9(self, meses_9):
        """Sets the meses_9 of this InlineResponse2003Message.

        Retorno acumulado en 9 meses  # noqa: E501

        :param meses_9: The meses_9 of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._meses_9 = meses_9

    @property
    def anos_1(self):
        """Gets the anos_1 of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado en 1 año  # noqa: E501

        :return: The anos_1 of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._anos_1

    @anos_1.setter
    def anos_1(self, anos_1):
        """Sets the anos_1 of this InlineResponse2003Message.

        Retorno acumulado en 1 año  # noqa: E501

        :param anos_1: The anos_1 of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._anos_1 = anos_1

    @property
    def anos_2(self):
        """Gets the anos_2 of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado en 2 años  # noqa: E501

        :return: The anos_2 of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._anos_2

    @anos_2.setter
    def anos_2(self, anos_2):
        """Sets the anos_2 of this InlineResponse2003Message.

        Retorno acumulado en 2 años  # noqa: E501

        :param anos_2: The anos_2 of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._anos_2 = anos_2

    @property
    def anos_3(self):
        """Gets the anos_3 of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado en 3 años  # noqa: E501

        :return: The anos_3 of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._anos_3

    @anos_3.setter
    def anos_3(self, anos_3):
        """Sets the anos_3 of this InlineResponse2003Message.

        Retorno acumulado en 3 años  # noqa: E501

        :param anos_3: The anos_3 of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._anos_3 = anos_3

    @property
    def anos_5(self):
        """Gets the anos_5 of this InlineResponse2003Message.  # noqa: E501
        Retorno acumulado en 5 años  # noqa: E501

        :return: The anos_5 of this InlineResponse2003Message.  # noqa: E501
        :rtype: float
        """
        return self._anos_5

    @anos_5.setter
    def anos_5(self, anos_5):
        """Sets the anos_5 of this InlineResponse2003Message.

        Retorno acumulado en 5 años  # noqa: E501

        :param anos_5: The anos_5 of this InlineResponse2003Message.  # noqa: E501
        :type: float
        """

        self._anos_5 = anos_5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

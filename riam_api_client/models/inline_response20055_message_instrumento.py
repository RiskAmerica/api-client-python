# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SDK disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models




class InlineResponse20055MessageInstrumento(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emisor': 'str',
        'sector': 'str',
        'rut': 'str',
        'razon_social': 'str',
        'codigo_svs': 'str',
        'grupo_empresarial': 'str'
    }

    attribute_map = {
        'emisor': 'emisor',
        'sector': 'sector',
        'rut': 'rut',
        'razon_social': 'razonSocial',
        'codigo_svs': 'codigoSVS',
        'grupo_empresarial': 'grupoEmpresarial'
    }

    def __init__(self, emisor=None, sector=None, rut=None, razon_social=None, codigo_svs=None, grupo_empresarial=None):  # noqa: E501
        """InlineResponse20055MessageInstrumento - a model defined in Swagger"""  # noqa: E501
        self._emisor = None
        self._sector = None
        self._rut = None
        self._razon_social = None
        self._codigo_svs = None
        self._grupo_empresarial = None
        self.discriminator = None
        if emisor is not None:
            self.emisor = emisor
        if sector is not None:
            self.sector = sector
        if rut is not None:
            self.rut = rut
        if razon_social is not None:
            self.razon_social = razon_social
        if codigo_svs is not None:
            self.codigo_svs = codigo_svs
        if grupo_empresarial is not None:
            self.grupo_empresarial = grupo_empresarial

    @property
    def emisor(self):
        """Gets the emisor of this InlineResponse20055MessageInstrumento.  # noqa: E501
        Emisor  # noqa: E501

        :return: The emisor of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :rtype: str
        """
        return self._emisor

    @emisor.setter
    def emisor(self, emisor):
        """Sets the emisor of this InlineResponse20055MessageInstrumento.

        Emisor  # noqa: E501

        :param emisor: The emisor of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :type: str
        """

        self._emisor = emisor

    @property
    def sector(self):
        """Gets the sector of this InlineResponse20055MessageInstrumento.  # noqa: E501
        Sector  # noqa: E501

        :return: The sector of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this InlineResponse20055MessageInstrumento.

        Sector  # noqa: E501

        :param sector: The sector of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def rut(self):
        """Gets the rut of this InlineResponse20055MessageInstrumento.  # noqa: E501
        RUT del emisor  # noqa: E501

        :return: The rut of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :rtype: str
        """
        return self._rut

    @rut.setter
    def rut(self, rut):
        """Sets the rut of this InlineResponse20055MessageInstrumento.

        RUT del emisor  # noqa: E501

        :param rut: The rut of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :type: str
        """

        self._rut = rut

    @property
    def razon_social(self):
        """Gets the razon_social of this InlineResponse20055MessageInstrumento.  # noqa: E501
        Razon Social de Emisor  # noqa: E501

        :return: The razon_social of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :rtype: str
        """
        return self._razon_social

    @razon_social.setter
    def razon_social(self, razon_social):
        """Sets the razon_social of this InlineResponse20055MessageInstrumento.

        Razon Social de Emisor  # noqa: E501

        :param razon_social: The razon_social of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :type: str
        """

        self._razon_social = razon_social

    @property
    def codigo_svs(self):
        """Gets the codigo_svs of this InlineResponse20055MessageInstrumento.  # noqa: E501
        CodigoSVS del Emisor  # noqa: E501

        :return: The codigo_svs of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :rtype: str
        """
        return self._codigo_svs

    @codigo_svs.setter
    def codigo_svs(self, codigo_svs):
        """Sets the codigo_svs of this InlineResponse20055MessageInstrumento.

        CodigoSVS del Emisor  # noqa: E501

        :param codigo_svs: The codigo_svs of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :type: str
        """

        self._codigo_svs = codigo_svs

    @property
    def grupo_empresarial(self):
        """Gets the grupo_empresarial of this InlineResponse20055MessageInstrumento.  # noqa: E501
        Grupo Empresarial del Emisor  # noqa: E501

        :return: The grupo_empresarial of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :rtype: str
        """
        return self._grupo_empresarial

    @grupo_empresarial.setter
    def grupo_empresarial(self, grupo_empresarial):
        """Sets the grupo_empresarial of this InlineResponse20055MessageInstrumento.

        Grupo Empresarial del Emisor  # noqa: E501

        :param grupo_empresarial: The grupo_empresarial of this InlineResponse20055MessageInstrumento.  # noqa: E501
        :type: str
        """

        self._grupo_empresarial = grupo_empresarial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20055MessageInstrumento, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20055MessageInstrumento):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SDK disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models




class InlineResponse20057Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fecha': 'date',
        'precio_cierre': 'float',
        'monto_cierre': 'float',
        'tipo_valorizacion_cierre': 'float',
        'fecha_ultima_transaccion': 'int'
    }

    attribute_map = {
        'fecha': 'fecha',
        'precio_cierre': 'precioCierre',
        'monto_cierre': 'montoCierre',
        'tipo_valorizacion_cierre': 'tipoValorizacionCierre',
        'fecha_ultima_transaccion': 'fechaUltimaTransaccion'
    }

    def __init__(self, fecha=None, precio_cierre=None, monto_cierre=None, tipo_valorizacion_cierre=None, fecha_ultima_transaccion=None):  # noqa: E501
        """InlineResponse20057Message - a model defined in Swagger"""  # noqa: E501
        self._fecha = None
        self._precio_cierre = None
        self._monto_cierre = None
        self._tipo_valorizacion_cierre = None
        self._fecha_ultima_transaccion = None
        self.discriminator = None
        if fecha is not None:
            self.fecha = fecha
        if precio_cierre is not None:
            self.precio_cierre = precio_cierre
        if monto_cierre is not None:
            self.monto_cierre = monto_cierre
        if tipo_valorizacion_cierre is not None:
            self.tipo_valorizacion_cierre = tipo_valorizacion_cierre
        if fecha_ultima_transaccion is not None:
            self.fecha_ultima_transaccion = fecha_ultima_transaccion

    @property
    def fecha(self):
        """Gets the fecha of this InlineResponse20057Message.  # noqa: E501
        Fecha de la Valorización  # noqa: E501

        :return: The fecha of this InlineResponse20057Message.  # noqa: E501
        :rtype: date
        """
        return self._fecha

    @fecha.setter
    def fecha(self, fecha):
        """Sets the fecha of this InlineResponse20057Message.

        Fecha de la Valorización  # noqa: E501

        :param fecha: The fecha of this InlineResponse20057Message.  # noqa: E501
        :type: date
        """

        self._fecha = fecha

    @property
    def precio_cierre(self):
        """Gets the precio_cierre of this InlineResponse20057Message.  # noqa: E501
        Precio de Cierre del instrumento  # noqa: E501

        :return: The precio_cierre of this InlineResponse20057Message.  # noqa: E501
        :rtype: float
        """
        return self._precio_cierre

    @precio_cierre.setter
    def precio_cierre(self, precio_cierre):
        """Sets the precio_cierre of this InlineResponse20057Message.

        Precio de Cierre del instrumento  # noqa: E501

        :param precio_cierre: The precio_cierre of this InlineResponse20057Message.  # noqa: E501
        :type: float
        """

        self._precio_cierre = precio_cierre

    @property
    def monto_cierre(self):
        """Gets the monto_cierre of this InlineResponse20057Message.  # noqa: E501
        Monto de Cierre del instrumento  # noqa: E501

        :return: The monto_cierre of this InlineResponse20057Message.  # noqa: E501
        :rtype: float
        """
        return self._monto_cierre

    @monto_cierre.setter
    def monto_cierre(self, monto_cierre):
        """Sets the monto_cierre of this InlineResponse20057Message.

        Monto de Cierre del instrumento  # noqa: E501

        :param monto_cierre: The monto_cierre of this InlineResponse20057Message.  # noqa: E501
        :type: float
        """

        self._monto_cierre = monto_cierre

    @property
    def tipo_valorizacion_cierre(self):
        """Gets the tipo_valorizacion_cierre of this InlineResponse20057Message.  # noqa: E501
        Tipo de Valorizacion de cierre (condición)  # noqa: E501

        :return: The tipo_valorizacion_cierre of this InlineResponse20057Message.  # noqa: E501
        :rtype: float
        """
        return self._tipo_valorizacion_cierre

    @tipo_valorizacion_cierre.setter
    def tipo_valorizacion_cierre(self, tipo_valorizacion_cierre):
        """Sets the tipo_valorizacion_cierre of this InlineResponse20057Message.

        Tipo de Valorizacion de cierre (condición)  # noqa: E501

        :param tipo_valorizacion_cierre: The tipo_valorizacion_cierre of this InlineResponse20057Message.  # noqa: E501
        :type: float
        """

        self._tipo_valorizacion_cierre = tipo_valorizacion_cierre

    @property
    def fecha_ultima_transaccion(self):
        """Gets the fecha_ultima_transaccion of this InlineResponse20057Message.  # noqa: E501
        Fecha de la última transacción del instrumento  # noqa: E501

        :return: The fecha_ultima_transaccion of this InlineResponse20057Message.  # noqa: E501
        :rtype: int
        """
        return self._fecha_ultima_transaccion

    @fecha_ultima_transaccion.setter
    def fecha_ultima_transaccion(self, fecha_ultima_transaccion):
        """Sets the fecha_ultima_transaccion of this InlineResponse20057Message.

        Fecha de la última transacción del instrumento  # noqa: E501

        :param fecha_ultima_transaccion: The fecha_ultima_transaccion of this InlineResponse20057Message.  # noqa: E501
        :type: int
        """

        self._fecha_ultima_transaccion = fecha_ultima_transaccion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20057Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20057Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models




class InlineResponse2009Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ponderacion_inicio_dia': 'float',
        'nemo': 'str',
        'moneda': 'str',
        'clasificacion': 'str',
        'duracion': 'float',
        'plazo_residual': 'float',
        'tipo_svs': 'str'
    }

    attribute_map = {
        'ponderacion_inicio_dia': 'ponderacionInicioDia',
        'nemo': 'nemo',
        'moneda': 'moneda',
        'clasificacion': 'clasificacion',
        'duracion': 'duracion',
        'plazo_residual': 'plazoResidual',
        'tipo_svs': 'tipoSVS'
    }

    def __init__(self, ponderacion_inicio_dia=None, nemo=None, moneda=None, clasificacion=None, duracion=None, plazo_residual=None, tipo_svs=None):  # noqa: E501
        """InlineResponse2009Message - a model defined in Swagger"""  # noqa: E501
        self._ponderacion_inicio_dia = None
        self._nemo = None
        self._moneda = None
        self._clasificacion = None
        self._duracion = None
        self._plazo_residual = None
        self._tipo_svs = None
        self.discriminator = None
        if ponderacion_inicio_dia is not None:
            self.ponderacion_inicio_dia = ponderacion_inicio_dia
        if nemo is not None:
            self.nemo = nemo
        if moneda is not None:
            self.moneda = moneda
        if clasificacion is not None:
            self.clasificacion = clasificacion
        if duracion is not None:
            self.duracion = duracion
        if plazo_residual is not None:
            self.plazo_residual = plazo_residual
        if tipo_svs is not None:
            self.tipo_svs = tipo_svs

    @property
    def ponderacion_inicio_dia(self):
        """Gets the ponderacion_inicio_dia of this InlineResponse2009Message.  # noqa: E501
        Ponderación del instrumento para la fecha consultada  # noqa: E501

        :return: The ponderacion_inicio_dia of this InlineResponse2009Message.  # noqa: E501
        :rtype: float
        """
        return self._ponderacion_inicio_dia

    @ponderacion_inicio_dia.setter
    def ponderacion_inicio_dia(self, ponderacion_inicio_dia):
        """Sets the ponderacion_inicio_dia of this InlineResponse2009Message.

        Ponderación del instrumento para la fecha consultada  # noqa: E501

        :param ponderacion_inicio_dia: The ponderacion_inicio_dia of this InlineResponse2009Message.  # noqa: E501
        :type: float
        """

        self._ponderacion_inicio_dia = ponderacion_inicio_dia

    @property
    def nemo(self):
        """Gets the nemo of this InlineResponse2009Message.  # noqa: E501
        Nemotécnico del instrumento  # noqa: E501

        :return: The nemo of this InlineResponse2009Message.  # noqa: E501
        :rtype: str
        """
        return self._nemo

    @nemo.setter
    def nemo(self, nemo):
        """Sets the nemo of this InlineResponse2009Message.

        Nemotécnico del instrumento  # noqa: E501

        :param nemo: The nemo of this InlineResponse2009Message.  # noqa: E501
        :type: str
        """

        self._nemo = nemo

    @property
    def moneda(self):
        """Gets the moneda of this InlineResponse2009Message.  # noqa: E501
        Moneda del instrumento  # noqa: E501

        :return: The moneda of this InlineResponse2009Message.  # noqa: E501
        :rtype: str
        """
        return self._moneda

    @moneda.setter
    def moneda(self, moneda):
        """Sets the moneda of this InlineResponse2009Message.

        Moneda del instrumento  # noqa: E501

        :param moneda: The moneda of this InlineResponse2009Message.  # noqa: E501
        :type: str
        """

        self._moneda = moneda

    @property
    def clasificacion(self):
        """Gets the clasificacion of this InlineResponse2009Message.  # noqa: E501
        Mínima clasificación de riesgo para el instrumento  # noqa: E501

        :return: The clasificacion of this InlineResponse2009Message.  # noqa: E501
        :rtype: str
        """
        return self._clasificacion

    @clasificacion.setter
    def clasificacion(self, clasificacion):
        """Sets the clasificacion of this InlineResponse2009Message.

        Mínima clasificación de riesgo para el instrumento  # noqa: E501

        :param clasificacion: The clasificacion of this InlineResponse2009Message.  # noqa: E501
        :type: str
        """

        self._clasificacion = clasificacion

    @property
    def duracion(self):
        """Gets the duracion of this InlineResponse2009Message.  # noqa: E501
        Duración del instrumento  # noqa: E501

        :return: The duracion of this InlineResponse2009Message.  # noqa: E501
        :rtype: float
        """
        return self._duracion

    @duracion.setter
    def duracion(self, duracion):
        """Sets the duracion of this InlineResponse2009Message.

        Duración del instrumento  # noqa: E501

        :param duracion: The duracion of this InlineResponse2009Message.  # noqa: E501
        :type: float
        """

        self._duracion = duracion

    @property
    def plazo_residual(self):
        """Gets the plazo_residual of this InlineResponse2009Message.  # noqa: E501
        Plazo del instrumento  # noqa: E501

        :return: The plazo_residual of this InlineResponse2009Message.  # noqa: E501
        :rtype: float
        """
        return self._plazo_residual

    @plazo_residual.setter
    def plazo_residual(self, plazo_residual):
        """Sets the plazo_residual of this InlineResponse2009Message.

        Plazo del instrumento  # noqa: E501

        :param plazo_residual: The plazo_residual of this InlineResponse2009Message.  # noqa: E501
        :type: float
        """

        self._plazo_residual = plazo_residual

    @property
    def tipo_svs(self):
        """Gets the tipo_svs of this InlineResponse2009Message.  # noqa: E501
        Tipo de instrumento, de acuerdo a la SVS  # noqa: E501

        :return: The tipo_svs of this InlineResponse2009Message.  # noqa: E501
        :rtype: str
        """
        return self._tipo_svs

    @tipo_svs.setter
    def tipo_svs(self, tipo_svs):
        """Sets the tipo_svs of this InlineResponse2009Message.

        Tipo de instrumento, de acuerdo a la SVS  # noqa: E501

        :param tipo_svs: The tipo_svs of this InlineResponse2009Message.  # noqa: E501
        :type: str
        """

        self._tipo_svs = tipo_svs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

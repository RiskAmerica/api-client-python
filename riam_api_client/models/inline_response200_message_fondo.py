# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SKD disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models
from .inline_response200_message_fondo_administradora import InlineResponse200MessageFondoAdministradora
from .inline_response200_message_fondo_series import InlineResponse200MessageFondoSeries




class InlineResponse200MessageFondo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rut_fondo': 'int',
        'nombre_fondo': 'str',
        'fecha_inicio_fondo': 'date',
        'fecha_termino_fondo': 'date',
        'moneda': 'str',
        'tipo_fondo': 'str',
        'categoria_svs': 'str',
        'id_categoria_svs': 'int',
        'categoria_aafm': 'str',
        'categoria_acafi': 'str',
        'administradora': 'InlineResponse200MessageFondoAdministradora',
        'series': 'list[InlineResponse200MessageFondoSeries]'
    }

    attribute_map = {
        'rut_fondo': 'rutFondo',
        'nombre_fondo': 'nombreFondo',
        'fecha_inicio_fondo': 'fechaInicioFondo',
        'fecha_termino_fondo': 'fechaTerminoFondo',
        'moneda': 'moneda',
        'tipo_fondo': 'tipoFondo',
        'categoria_svs': 'categoriaSVS',
        'id_categoria_svs': 'idCategoriaSVS',
        'categoria_aafm': 'categoriaAAFM',
        'categoria_acafi': 'categoriaACAFI',
        'administradora': 'Administradora',
        'series': 'Series'
    }

    def __init__(self, rut_fondo=None, nombre_fondo=None, fecha_inicio_fondo=None, fecha_termino_fondo=None, moneda=None, tipo_fondo=None, categoria_svs=None, id_categoria_svs=None, categoria_aafm=None, categoria_acafi=None, administradora=None, series=None):  # noqa: E501
        """InlineResponse200MessageFondo - a model defined in Swagger"""  # noqa: E501
        self._rut_fondo = None
        self._nombre_fondo = None
        self._fecha_inicio_fondo = None
        self._fecha_termino_fondo = None
        self._moneda = None
        self._tipo_fondo = None
        self._categoria_svs = None
        self._id_categoria_svs = None
        self._categoria_aafm = None
        self._categoria_acafi = None
        self._administradora = None
        self._series = None
        self.discriminator = None
        if rut_fondo is not None:
            self.rut_fondo = rut_fondo
        if nombre_fondo is not None:
            self.nombre_fondo = nombre_fondo
        if fecha_inicio_fondo is not None:
            self.fecha_inicio_fondo = fecha_inicio_fondo
        if fecha_termino_fondo is not None:
            self.fecha_termino_fondo = fecha_termino_fondo
        if moneda is not None:
            self.moneda = moneda
        if tipo_fondo is not None:
            self.tipo_fondo = tipo_fondo
        if categoria_svs is not None:
            self.categoria_svs = categoria_svs
        if id_categoria_svs is not None:
            self.id_categoria_svs = id_categoria_svs
        if categoria_aafm is not None:
            self.categoria_aafm = categoria_aafm
        if categoria_acafi is not None:
            self.categoria_acafi = categoria_acafi
        if administradora is not None:
            self.administradora = administradora
        if series is not None:
            self.series = series

    @property
    def rut_fondo(self):
        """Gets the rut_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        Rut del Fondo (sin dígito verificador)  # noqa: E501

        :return: The rut_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: int
        """
        return self._rut_fondo

    @rut_fondo.setter
    def rut_fondo(self, rut_fondo):
        """Sets the rut_fondo of this InlineResponse200MessageFondo.

        Rut del Fondo (sin dígito verificador)  # noqa: E501

        :param rut_fondo: The rut_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :type: int
        """

        self._rut_fondo = rut_fondo

    @property
    def nombre_fondo(self):
        """Gets the nombre_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        Nombre del fondo  # noqa: E501

        :return: The nombre_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: str
        """
        return self._nombre_fondo

    @nombre_fondo.setter
    def nombre_fondo(self, nombre_fondo):
        """Sets the nombre_fondo of this InlineResponse200MessageFondo.

        Nombre del fondo  # noqa: E501

        :param nombre_fondo: The nombre_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :type: str
        """

        self._nombre_fondo = nombre_fondo

    @property
    def fecha_inicio_fondo(self):
        """Gets the fecha_inicio_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        Fecha en la que se inició el fondo  # noqa: E501

        :return: The fecha_inicio_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: date
        """
        return self._fecha_inicio_fondo

    @fecha_inicio_fondo.setter
    def fecha_inicio_fondo(self, fecha_inicio_fondo):
        """Sets the fecha_inicio_fondo of this InlineResponse200MessageFondo.

        Fecha en la que se inició el fondo  # noqa: E501

        :param fecha_inicio_fondo: The fecha_inicio_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :type: date
        """

        self._fecha_inicio_fondo = fecha_inicio_fondo

    @property
    def fecha_termino_fondo(self):
        """Gets the fecha_termino_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        Fecha en la que terminó el fondo  # noqa: E501

        :return: The fecha_termino_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: date
        """
        return self._fecha_termino_fondo

    @fecha_termino_fondo.setter
    def fecha_termino_fondo(self, fecha_termino_fondo):
        """Sets the fecha_termino_fondo of this InlineResponse200MessageFondo.

        Fecha en la que terminó el fondo  # noqa: E501

        :param fecha_termino_fondo: The fecha_termino_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :type: date
        """

        self._fecha_termino_fondo = fecha_termino_fondo

    @property
    def moneda(self):
        """Gets the moneda of this InlineResponse200MessageFondo.  # noqa: E501
        Código SVS de la moneda del fondo  # noqa: E501

        :return: The moneda of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: str
        """
        return self._moneda

    @moneda.setter
    def moneda(self, moneda):
        """Sets the moneda of this InlineResponse200MessageFondo.

        Código SVS de la moneda del fondo  # noqa: E501

        :param moneda: The moneda of this InlineResponse200MessageFondo.  # noqa: E501
        :type: str
        """

        self._moneda = moneda

    @property
    def tipo_fondo(self):
        """Gets the tipo_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        Tipo de Fondo: CFM o CFI  # noqa: E501

        :return: The tipo_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: str
        """
        return self._tipo_fondo

    @tipo_fondo.setter
    def tipo_fondo(self, tipo_fondo):
        """Sets the tipo_fondo of this InlineResponse200MessageFondo.

        Tipo de Fondo: CFM o CFI  # noqa: E501

        :param tipo_fondo: The tipo_fondo of this InlineResponse200MessageFondo.  # noqa: E501
        :type: str
        """

        self._tipo_fondo = tipo_fondo

    @property
    def categoria_svs(self):
        """Gets the categoria_svs of this InlineResponse200MessageFondo.  # noqa: E501
        Categoria SVS del fondo  # noqa: E501

        :return: The categoria_svs of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: str
        """
        return self._categoria_svs

    @categoria_svs.setter
    def categoria_svs(self, categoria_svs):
        """Sets the categoria_svs of this InlineResponse200MessageFondo.

        Categoria SVS del fondo  # noqa: E501

        :param categoria_svs: The categoria_svs of this InlineResponse200MessageFondo.  # noqa: E501
        :type: str
        """

        self._categoria_svs = categoria_svs

    @property
    def id_categoria_svs(self):
        """Gets the id_categoria_svs of this InlineResponse200MessageFondo.  # noqa: E501
        idCategoria SVS del fondo  # noqa: E501

        :return: The id_categoria_svs of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: int
        """
        return self._id_categoria_svs

    @id_categoria_svs.setter
    def id_categoria_svs(self, id_categoria_svs):
        """Sets the id_categoria_svs of this InlineResponse200MessageFondo.

        idCategoria SVS del fondo  # noqa: E501

        :param id_categoria_svs: The id_categoria_svs of this InlineResponse200MessageFondo.  # noqa: E501
        :type: int
        """

        self._id_categoria_svs = id_categoria_svs

    @property
    def categoria_aafm(self):
        """Gets the categoria_aafm of this InlineResponse200MessageFondo.  # noqa: E501
        Categoria AAFM del fondo  # noqa: E501

        :return: The categoria_aafm of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: str
        """
        return self._categoria_aafm

    @categoria_aafm.setter
    def categoria_aafm(self, categoria_aafm):
        """Sets the categoria_aafm of this InlineResponse200MessageFondo.

        Categoria AAFM del fondo  # noqa: E501

        :param categoria_aafm: The categoria_aafm of this InlineResponse200MessageFondo.  # noqa: E501
        :type: str
        """

        self._categoria_aafm = categoria_aafm

    @property
    def categoria_acafi(self):
        """Gets the categoria_acafi of this InlineResponse200MessageFondo.  # noqa: E501
        Categoria ACAFI del fondo  # noqa: E501

        :return: The categoria_acafi of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: str
        """
        return self._categoria_acafi

    @categoria_acafi.setter
    def categoria_acafi(self, categoria_acafi):
        """Sets the categoria_acafi of this InlineResponse200MessageFondo.

        Categoria ACAFI del fondo  # noqa: E501

        :param categoria_acafi: The categoria_acafi of this InlineResponse200MessageFondo.  # noqa: E501
        :type: str
        """

        self._categoria_acafi = categoria_acafi

    @property
    def administradora(self):
        """Gets the administradora of this InlineResponse200MessageFondo.  # noqa: E501

        :return: The administradora of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: InlineResponse200MessageFondoAdministradora
        """
        return self._administradora

    @administradora.setter
    def administradora(self, administradora):
        """Sets the administradora of this InlineResponse200MessageFondo.


        :param administradora: The administradora of this InlineResponse200MessageFondo.  # noqa: E501
        :type: InlineResponse200MessageFondoAdministradora
        """

        self._administradora = administradora

    @property
    def series(self):
        """Gets the series of this InlineResponse200MessageFondo.  # noqa: E501

        :return: The series of this InlineResponse200MessageFondo.  # noqa: E501
        :rtype: list[InlineResponse200MessageFondoSeries]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this InlineResponse200MessageFondo.


        :param series: The series of this InlineResponse200MessageFondo.  # noqa: E501
        :type: list[InlineResponse200MessageFondoSeries]
        """

        self._series = series

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200MessageFondo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200MessageFondo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**. - En caso de usar **Python** como lenguaje de programación puede visitar nuestro SDK disponible en [https://github.com/RiskAmerica/api-client-python](https://github.com/RiskAmerica/api-client-python) .  - En caso de usar otros lenguajes de programación puede usar el proyecto [https://github.com/swagger-api/swagger-codegen/tree/3.0.0](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) para generar su propio SDK a partir del archivo [openapi.json](https://ra-public-files.s3-sa-east-1.amazonaws.com/wide-public/riam-api/openapi.json) . - Todas las APIs funcionan exclusivamente bajo el protocolo HTTPS usando TLS 1.2 o 1.3   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
# Importing related models




class InlineResponse200MessageFondoSeries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'serie': 'str',
        'codigo_bloomberg': 'str',
        'fecha_inicio_serie': 'date',
        'fecha_termino_serie': 'date',
        'is_apv': 'int',
        'serie_previa': 'str'
    }

    attribute_map = {
        'serie': 'serie',
        'codigo_bloomberg': 'codigoBloomberg',
        'fecha_inicio_serie': 'fechaInicioSerie',
        'fecha_termino_serie': 'fechaTerminoSerie',
        'is_apv': 'isAPV',
        'serie_previa': 'seriePrevia'
    }

    def __init__(self, serie=None, codigo_bloomberg=None, fecha_inicio_serie=None, fecha_termino_serie=None, is_apv=None, serie_previa=None):  # noqa: E501
        """InlineResponse200MessageFondoSeries - a model defined in Swagger"""  # noqa: E501
        self._serie = None
        self._codigo_bloomberg = None
        self._fecha_inicio_serie = None
        self._fecha_termino_serie = None
        self._is_apv = None
        self._serie_previa = None
        self.discriminator = None
        if serie is not None:
            self.serie = serie
        if codigo_bloomberg is not None:
            self.codigo_bloomberg = codigo_bloomberg
        if fecha_inicio_serie is not None:
            self.fecha_inicio_serie = fecha_inicio_serie
        if fecha_termino_serie is not None:
            self.fecha_termino_serie = fecha_termino_serie
        if is_apv is not None:
            self.is_apv = is_apv
        if serie_previa is not None:
            self.serie_previa = serie_previa

    @property
    def serie(self):
        """Gets the serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        Código de la serie  # noqa: E501

        :return: The serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :rtype: str
        """
        return self._serie

    @serie.setter
    def serie(self, serie):
        """Sets the serie of this InlineResponse200MessageFondoSeries.

        Código de la serie  # noqa: E501

        :param serie: The serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :type: str
        """

        self._serie = serie

    @property
    def codigo_bloomberg(self):
        """Gets the codigo_bloomberg of this InlineResponse200MessageFondoSeries.  # noqa: E501
        Ticker Bloomberg de la serie  # noqa: E501

        :return: The codigo_bloomberg of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :rtype: str
        """
        return self._codigo_bloomberg

    @codigo_bloomberg.setter
    def codigo_bloomberg(self, codigo_bloomberg):
        """Sets the codigo_bloomberg of this InlineResponse200MessageFondoSeries.

        Ticker Bloomberg de la serie  # noqa: E501

        :param codigo_bloomberg: The codigo_bloomberg of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :type: str
        """

        self._codigo_bloomberg = codigo_bloomberg

    @property
    def fecha_inicio_serie(self):
        """Gets the fecha_inicio_serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        Fecha en la que inició la serie  # noqa: E501

        :return: The fecha_inicio_serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :rtype: date
        """
        return self._fecha_inicio_serie

    @fecha_inicio_serie.setter
    def fecha_inicio_serie(self, fecha_inicio_serie):
        """Sets the fecha_inicio_serie of this InlineResponse200MessageFondoSeries.

        Fecha en la que inició la serie  # noqa: E501

        :param fecha_inicio_serie: The fecha_inicio_serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :type: date
        """

        self._fecha_inicio_serie = fecha_inicio_serie

    @property
    def fecha_termino_serie(self):
        """Gets the fecha_termino_serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        Fecha en la que terminó la serie  # noqa: E501

        :return: The fecha_termino_serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :rtype: date
        """
        return self._fecha_termino_serie

    @fecha_termino_serie.setter
    def fecha_termino_serie(self, fecha_termino_serie):
        """Sets the fecha_termino_serie of this InlineResponse200MessageFondoSeries.

        Fecha en la que terminó la serie  # noqa: E501

        :param fecha_termino_serie: The fecha_termino_serie of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :type: date
        """

        self._fecha_termino_serie = fecha_termino_serie

    @property
    def is_apv(self):
        """Gets the is_apv of this InlineResponse200MessageFondoSeries.  # noqa: E501
        Indica si es una serie APV (1) o no (0)  # noqa: E501

        :return: The is_apv of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :rtype: int
        """
        return self._is_apv

    @is_apv.setter
    def is_apv(self, is_apv):
        """Sets the is_apv of this InlineResponse200MessageFondoSeries.

        Indica si es una serie APV (1) o no (0)  # noqa: E501

        :param is_apv: The is_apv of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :type: int
        """

        self._is_apv = is_apv

    @property
    def serie_previa(self):
        """Gets the serie_previa of this InlineResponse200MessageFondoSeries.  # noqa: E501
        Código de la serie antecesora  # noqa: E501

        :return: The serie_previa of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :rtype: str
        """
        return self._serie_previa

    @serie_previa.setter
    def serie_previa(self, serie_previa):
        """Sets the serie_previa of this InlineResponse200MessageFondoSeries.

        Código de la serie antecesora  # noqa: E501

        :param serie_previa: The serie_previa of this InlineResponse200MessageFondoSeries.  # noqa: E501
        :type: str
        """

        self._serie_previa = serie_previa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200MessageFondoSeries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200MessageFondoSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

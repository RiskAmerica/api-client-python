# coding: utf-8

"""
    APIs RISKAMERICA

    A continuación les presentamos la documentación las **APIs** **de** **RiskAmerica**, el cual es un servicio pagado ofrecido por RiskAmerica que se contrata por separado a nuestras otras ofertas de software.  Algunas consideraciones que debe tener al momento de usar las APIs: - El APIKEY o Token lo puede conseguir solicitándolo al equipo comercial de RiskAmerica - El request necesita ser enviado con el header **Accept:** **application/json** para que responda en formato **JSON** (de no ser enviado con esto se responderá en formato **XML**) - Todos los Servicios son **REST** y sus parametros pueden ser enviados tanto en **POST** como **GET** - El uso de las APIs puede llevar un cobro asociado según se pacte en el acuerdo comercial, por lo que le recomendamos ser cuidadosos en el uso de éstas para evitar sobre-cargos innecesarios. - RiskAmerica funciona con un mecanismo de **WhiteList** **de** **IPs** para las consultas de las API. Para habilitar o modificar la lista de IPs permitidas debe contactarse al mail **contacto@riskamerica.com**.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import riam_api_client
from riam_api_client.api.rfn_informacion_api import RFNInformacionApi  # noqa: E501
from riam_api_client.rest import ApiException


class TestRFNInformacionApi(unittest.TestCase):
    """RFNInformacionApi unit test stubs"""

    def setUp(self):
        self.api = RFNInformacionApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_r_fn_informacion_informacion_get(self):
        """Test case for r_fn_informacion_informacion_get

        Obtiene la información del Instrumento.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_informacion_get_interval_tasa_prepago(self):
        """Test case for r_fn_informacion_informacion_get_interval_tasa_prepago

        Obtiene las tasas de prepago de un instrumento, en un invervalo de tiempo.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_informacion_get_prepagos_historicos(self):
        """Test case for r_fn_informacion_informacion_get_prepagos_historicos

        Obtiene los prepagos realizados.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_informacion_get_tasa_prepago(self):
        """Test case for r_fn_informacion_informacion_get_tasa_prepago

        Obtiene las tasas de prepago.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_liquidez_get(self):
        """Test case for r_fn_informacion_liquidez_get

        Obtiene información de liquidez de un instrumento.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_liquidez_get_interval_ncg(self):
        """Test case for r_fn_informacion_liquidez_get_interval_ncg

        Obtiene información histórica del monto transado promedio definido por la Norma de Caracter General N°376.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto(self):
        """Test case for r_fn_informacion_liquidez_get_interval_saldo_custodia_insoluto

        Obtiene información histórica del saldo insoluto.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal(self):
        """Test case for r_fn_informacion_liquidez_get_interval_saldo_custodia_nominal

        Obtiene información histórica del saldo de custodia nominal.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_riesgo_get(self):
        """Test case for r_fn_informacion_riesgo_get

        Obtiene los cambios de clasificación de riesgo de un instrumento.  # noqa: E501
        """
        pass

    def test_r_fn_informacion_tabla_desarrollo_get_cupones_futuros(self):
        """Test case for r_fn_informacion_tabla_desarrollo_get_cupones_futuros

        Obtiene la tabla de desarrollo residual para un instrumento particular.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
